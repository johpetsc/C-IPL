.table
int IL_s0[100] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
int IL_s0_size = 0
float FL_s0[100] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0}
int FL_s0_size = 0
int i_s1
int new_s1[100] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
int new_s1_size = 0
int elem_s2
char _s0[] = "Digite o elemento da lista: "
char _s1[] = "Digite os número de elementos da lista: "
int n_s5
float FL10_s5[100] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0}
int FL10_s5_size = 0
float AUXL_s6[100] = {.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0,.0}
int AUXL_s6_size = 0
int n_s6
char _s2[] = " "
char _s3[] = " "
char _s4[] = "A nova lista tem "
char _s5[] = " elementos."
char _s6[] = "A nova lista não possui elementos."
int NIL[100] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
int NIL_size = 0

.code
_read_list:
minus $0, 435.7
mov $700, $0
fltoint $700, $700
mov i_s1, $700
mov $400, &new_s1
mov $500, &NIL
mov $600, 0

mov $601, NIL_size
L0:
mov $603, $500[$600]
mov $400[$600], $603
sub $602, $601, $600
add $600, $600, 1
brnz L0, $602
mov new_s1_size, $601
mov i_s1, 0
// for
L1:
slt $1, i_s1, #0
jump L2
L4:
add $2, i_s1, 1
mov i_s1, $2
jump L1
L3:
// out
mov $1000, 28
mov $999, 0
L5:
mov $3, &_s0
mov $3, $3[$999]
print $3
sub $1000, $1000, 1
add $999, $999, 1
brnz L5, $1000
print '\n' 
// in
scanf $665
fltoint $665, $665
mov elem_s2, $665
mov $500, &new_s1
mov $601, new_s1_size
brz L7, $601
sub $602, $601, 1
L6:
mov $604, $500[$602]
mov $500[$601], $604
sub $602, $602, 1
sub $601, $601, 1
brnz L6, $601
L7:
mov $500[0], elem_s2
add new_s1_size, new_s1_size, 1
mov $400, &new_s1
mov $500, &new_s1
mov $600, 0

mov $601, new_s1_size
L8:
mov $603, $500[$600]
mov $400[$600], $603
sub $602, $601, $600
add $600, $600, 1
brnz L8, $602
mov new_s1_size, $601
jump L4
L2:
brnz L3, $1
return new_s1
_succ:
add $4, #0, 1
return $4
_leq_10:
mov $700, #0
fltoint $700, $700
sleq $5, $700, 10
return $5
_main:
// out
mov $1000, 41
mov $999, 0
L9:
mov $6, &_s1
mov $6, $6[$999]
print $6
sub $1000, $1000, 1
add $999, $999, 1
brnz L9, $1000
print '\n' 
// in
scanf $665
fltoint $665, $665
mov n_s5, $665
param n_s5
call _read_list, 1
mov $400, &IL_s0
mov $500, &new_s1
mov $600, 0

mov $601, new_s1_size
L10:
mov $603, $500[$600]
mov $400[$600], $603
sub $602, $601, $600
add $600, $600, 1
brnz L10, $602
mov IL_s0_size, $601
// map
mov $500, &IL_s0
mov $600, 0
mov $601, IL_s0_size
L11:
mov $603, $500[$600]
param $603
call _succ, 1
pop $605
mov $500[$600], $605
add $600, $600, 1
sub $602, $601, $600
brnz L11, $602
mov $400, &FL_s0
mov $500, &IL_s0
mov $600, 0

mov $601, IL_s0_size
L12:
mov $603, $500[$600]
inttofl $603, $603
mov $400[$600], $603
sub $602, $601, $600
add $600, $600, 1
brnz L12, $602
mov FL_s0_size, $601
// filter
mov $500, &FL_s0
mov $600, 0
mov $601, FL_s0_size
L13:
mov $603, $500[$600]
param $603
call _leq_10, 1
pop $605
brnz L15, $605
add $600, $600, 1
L16:
sub $602, $601, $600
brnz L13, $602
jump L17
L15:
mov $610, $600
add $611, $610, 1
L14:
mov $613, $500[$611]
mov $500[$610], $613
add $610, $610, 1
add $611, $611, 1
sub $612, $601, $610
brnz L14, $612
sub $601, $601, 1
sub FL_s0_size, FL_s0_size, 1
jump L16
L17:
mov $400, &FL10_s5
mov $500, &FL_s0
mov $600, 0

mov $601, FL_s0_size
L18:
mov $603, $500[$600]
mov $400[$600], $603
sub $602, $601, $600
add $600, $600, 1
brnz L18, $602
mov FL10_s5_size, $601
// if
mov $400, &FL10_s5
mov $500, &NIL
mov $600, 0

mov $601, NIL_size

mov $602, FL10_s5_size
mov $7, 0
sub $603, $601, $602
brnz L20, $603

mov $7, 1
L21:
mov $700, $400[$600]
fltoint $700, $700
mov $701, $500[$600]
seq $7, $701, $700
brz L20, $7
sub $602, $601, $600
add $600, $600, 1
brnz L21, $602
L20:
not $7, $7
brz L19, $7
mov n_s6, 0
mov $400, &AUXL_s6
mov $500, &FL10_s5
mov $600, 0

mov $601, FL10_s5_size
L22:
mov $603, $500[$600]
mov $400[$600], $603
sub $602, $601, $600
add $600, $600, 1
brnz L22, $602
mov AUXL_s6_size, $601
// for
L23:
mov $400, &AUXL_s6
mov $500, &NIL
mov $600, 0

mov $601, NIL_size

mov $602, AUXL_s6_size
mov $8, 0
sub $603, $601, $602
brnz L27, $603

mov $8, 1
L28:
mov $700, $400[$600]
fltoint $700, $700
mov $701, $500[$600]
seq $8, $701, $700
brz L27, $8
sub $602, $601, $600
add $600, $600, 1
brnz L28, $602
L27:
not $8, $8
jump L24
L26:
// tail
mov $500, &AUXL_s6
mov $600, 0
mov $605, 1
mov $601, AUXL_s6_size
brz L29, AUXL_s6_size
L30:
mov $603, $500[$605]
mov $500[$600], $603
add $600, $600, 1
add $605, $605, 1
sub $602, $601, $600
brnz L30, $602
sub AUXL_s6_size, AUXL_s6_size, 1
L29:
mov $400, &AUXL_s6
mov $500, &AUXL_s6
mov $600, 0

mov $601, AUXL_s6_size
L31:
mov $603, $500[$600]
mov $400[$600], $603
sub $602, $601, $600
add $600, $600, 1
brnz L31, $602
mov AUXL_s6_size, $601
jump L23
L25:
add $10, n_s6, 1
mov n_s6, $10
// head
mov $500, &AUXL_s6
mov $11, $500[0]
// out
print $11
// out
mov $1000, 1
mov $999, 0
L32:
mov $12, &_s2
mov $12, $12[$999]
print $12
sub $1000, $1000, 1
add $999, $999, 1
brnz L32, $1000
jump L26
L24:
brnz L25, $8
// out
mov $1000, 1
mov $999, 0
L33:
mov $13, &_s3
mov $13, $13[$999]
print $13
sub $1000, $1000, 1
add $999, $999, 1
brnz L33, $1000
print '\n' 
// out
mov $1000, 17
mov $999, 0
L34:
mov $14, &_s4
mov $14, $14[$999]
print $14
sub $1000, $1000, 1
add $999, $999, 1
brnz L34, $1000
// out
print n_s6
// out
mov $1000, 11
mov $999, 0
L35:
mov $15, &_s5
mov $15, $15[$999]
print $15
sub $1000, $1000, 1
add $999, $999, 1
brnz L35, $1000
print '\n' 
jump L36
L19:
// out
mov $1000, 35
mov $999, 0
L37:
mov $16, &_s6
mov $16, $16[$999]
print $16
sub $1000, $1000, 1
add $999, $999, 1
brnz L37, $1000
print '\n' 
L36:
return 0

main:
call _main, 0

