Grammar

    0 $accept: start $end

    1 start: program

    2 program: program program_block
    3        | program_block
    4        | error

    5 program_block: declar
    6              | func_dclr

    7 $@1: %empty

    8 $@2: %empty

    9 func_dclr: func LP $@1 params $@2 RP LB block RB

   10 $@3: %empty

   11 $@4: %empty

   12 func_dclr: func LP $@3 RP LB $@4 block RB

   13 params: params SEPARATOR param
   14       | param

   15 param: TYPE ID
   16      | TYPE LIST ID

   17 declar: TYPE ID END
   18       | TYPE LIST ID END

   19 func: TYPE ID
   20     | TYPE LIST ID

   21 block: block statement
   22      | block declar
   23      | statement
   24      | declar
   25      | error

   26 statement: expr END
   27          | ass_op END

   28 $@5: %empty

   29 statement: LB $@5 block RB
   30          | flow_ctr

   31 $@6: %empty

   32 flow_ctr: $@6 if_else
   33         | for
   34         | return END

   35 expr: operation
   36     | input
   37     | output

   38 if_else: IF LP operation RP statement

   39 $@7: %empty

   40 if_else: IF LP operation RP statement ELSE $@7 statement

   41 $@8: %empty

   42 $@9: %empty

   43 $@10: %empty

   44 for: FOR LP ass_op END $@8 operation $@9 END ass_op RP $@10 statement

   45 return: RETURN operation

   46 input: IN LP id RP

   47 output: OUT LP operation RP

   48 ass_op: id ASS_OP operation

   49 operation: log_op

   50 log_op: log_op LLOG_OP rel_op
   51       | rel_op

   52 rel_op: rel_op REL_OP list_op
   53       | list_op

   54 list_op: ari_op LIST_FUNC list_op
   55        | ari_op RLIST_OP list_op
   56        | ari_op

   57 ari_op: ari_op SS_OP md_op
   58       | SS_OP md_op
   59       | md_op

   60 md_op: md_op MD_OP un_op
   61      | un_op

   62 un_op: UN_OP un_op
   63      | val

   64 val: id
   65    | func_call
   66    | LP operation RP
   67    | INT
   68    | FLOAT
   69    | NIL
   70    | LITERAL

   71 $@11: %empty

   72 func_call: ID LP $@11 func_params RP
   73          | ID LP RP

   74 id: ID

   75 func_params: func_params SEPARATOR operation
   76            | operation


Terminals, with rules where they appear

    $end (0) 0
    error (256) 4 25
    INT <lex> (258) 67
    FLOAT <lex> (259) 68
    TYPE <lex> (260) 15 16 17 18 19 20
    ID <lex> (261) 15 16 17 18 19 20 72 73 74
    LIST <lex> (262) 16 18 20
    IF <lex> (263) 38 40
    ELSE <lex> (264) 40
    FOR <lex> (265) 44
    RETURN <lex> (266) 45
    OUT <lex> (267) 47
    IN <lex> (268) 46
    SS_OP <lex> (269) 57 58
    MD_OP <lex> (270) 60
    LLOG_OP <lex> (271) 50
    REL_OP <lex> (272) 52
    ASS_OP <lex> (273) 48
    LIST_FUNC <lex> (274) 54
    NIL <lex> (275) 69
    UN_OP <lex> (276) 62
    RLIST_OP <lex> (277) 55
    LITERAL <lex> (278) 70
    LB <lex> (279) 9 12 29
    RB <lex> (280) 9 12 29
    LP <lex> (281) 9 12 38 40 44 46 47 66 72 73
    RP <lex> (282) 9 12 38 40 44 46 47 66 72 73
    END <lex> (283) 17 18 26 27 34 44
    SEPARATOR <lex> (284) 13 75


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    start <treeNode> (31)
        on left: 1
        on right: 0
    program <treeNode> (32)
        on left: 2 3 4
        on right: 1 2
    program_block <treeNode> (33)
        on left: 5 6
        on right: 2 3
    func_dclr <treeNode> (34)
        on left: 9 12
        on right: 6
    $@1 (35)
        on left: 7
        on right: 9
    $@2 (36)
        on left: 8
        on right: 9
    $@3 (37)
        on left: 10
        on right: 12
    $@4 (38)
        on left: 11
        on right: 12
    params <treeNode> (39)
        on left: 13 14
        on right: 9 13
    param <treeNode> (40)
        on left: 15 16
        on right: 13 14
    declar <treeNode> (41)
        on left: 17 18
        on right: 5 22 24
    func <treeNode> (42)
        on left: 19 20
        on right: 9 12
    block <treeNode> (43)
        on left: 21 22 23 24 25
        on right: 9 12 21 22 29
    statement <treeNode> (44)
        on left: 26 27 29 30
        on right: 21 23 38 40 44
    $@5 (45)
        on left: 28
        on right: 29
    flow_ctr <treeNode> (46)
        on left: 32 33 34
        on right: 30
    $@6 (47)
        on left: 31
        on right: 32
    expr <treeNode> (48)
        on left: 35 36 37
        on right: 26
    if_else <treeNode> (49)
        on left: 38 40
        on right: 32
    $@7 (50)
        on left: 39
        on right: 40
    for <treeNode> (51)
        on left: 44
        on right: 33
    $@8 (52)
        on left: 41
        on right: 44
    $@9 (53)
        on left: 42
        on right: 44
    $@10 (54)
        on left: 43
        on right: 44
    return <treeNode> (55)
        on left: 45
        on right: 34
    input <treeNode> (56)
        on left: 46
        on right: 36
    output <treeNode> (57)
        on left: 47
        on right: 37
    ass_op <treeNode> (58)
        on left: 48
        on right: 27 44
    operation <treeNode> (59)
        on left: 49
        on right: 35 38 40 44 45 47 48 66 75 76
    log_op <treeNode> (60)
        on left: 50 51
        on right: 49 50
    rel_op <treeNode> (61)
        on left: 52 53
        on right: 50 51 52
    list_op <treeNode> (62)
        on left: 54 55 56
        on right: 52 53 54 55
    ari_op <treeNode> (63)
        on left: 57 58 59
        on right: 54 55 56 57
    md_op <treeNode> (64)
        on left: 60 61
        on right: 57 58 59 60
    un_op <treeNode> (65)
        on left: 62 63
        on right: 60 61 62
    val <treeNode> (66)
        on left: 64 65 66 67 68 69 70
        on right: 63
    func_call <treeNode> (67)
        on left: 72 73
        on right: 65
    $@11 (68)
        on left: 71
        on right: 72
    id <treeNode> (69)
        on left: 74
        on right: 46 48 64
    func_params <treeNode> (70)
        on left: 75 76
        on right: 72 75


State 0

    0 $accept: . start $end

    error  shift, and go to state 1
    TYPE   shift, and go to state 2

    start          go to state 3
    program        go to state 4
    program_block  go to state 5
    func_dclr      go to state 6
    declar         go to state 7
    func           go to state 8


State 1

    4 program: error .

    $end  reduce using rule 4 (program)
    TYPE  reduce using rule 4 (program)


State 2

   17 declar: TYPE . ID END
   18       | TYPE . LIST ID END
   19 func: TYPE . ID
   20     | TYPE . LIST ID

    ID    shift, and go to state 9
    LIST  shift, and go to state 10


State 3

    0 $accept: start . $end

    $end  shift, and go to state 11


State 4

    1 start: program .
    2 program: program . program_block

    TYPE  shift, and go to state 2

    $end  reduce using rule 1 (start)

    program_block  go to state 12
    func_dclr      go to state 6
    declar         go to state 7
    func           go to state 8


State 5

    3 program: program_block .

    $end  reduce using rule 3 (program)
    TYPE  reduce using rule 3 (program)


State 6

    6 program_block: func_dclr .

    $end  reduce using rule 6 (program_block)
    TYPE  reduce using rule 6 (program_block)


State 7

    5 program_block: declar .

    $end  reduce using rule 5 (program_block)
    TYPE  reduce using rule 5 (program_block)


State 8

    9 func_dclr: func . LP $@1 params $@2 RP LB block RB
   12          | func . LP $@3 RP LB $@4 block RB

    LP  shift, and go to state 13


State 9

   17 declar: TYPE ID . END
   19 func: TYPE ID .

    END  shift, and go to state 14

    LP  reduce using rule 19 (func)


State 10

   18 declar: TYPE LIST . ID END
   20 func: TYPE LIST . ID

    ID  shift, and go to state 15


State 11

    0 $accept: start $end .

    $default  accept


State 12

    2 program: program program_block .

    $end  reduce using rule 2 (program)
    TYPE  reduce using rule 2 (program)


State 13

    9 func_dclr: func LP . $@1 params $@2 RP LB block RB
   12          | func LP . $@3 RP LB $@4 block RB

    TYPE  reduce using rule 7 ($@1)
    RP    reduce using rule 10 ($@3)

    $@1  go to state 16
    $@3  go to state 17


State 14

   17 declar: TYPE ID END .

    $end  reduce using rule 17 (declar)
    TYPE  reduce using rule 17 (declar)


State 15

   18 declar: TYPE LIST ID . END
   20 func: TYPE LIST ID .

    END  shift, and go to state 18

    LP  reduce using rule 20 (func)


State 16

    9 func_dclr: func LP $@1 . params $@2 RP LB block RB

    TYPE  shift, and go to state 19

    params  go to state 20
    param   go to state 21


State 17

   12 func_dclr: func LP $@3 . RP LB $@4 block RB

    RP  shift, and go to state 22


State 18

   18 declar: TYPE LIST ID END .

    $end  reduce using rule 18 (declar)
    TYPE  reduce using rule 18 (declar)


State 19

   15 param: TYPE . ID
   16      | TYPE . LIST ID

    ID    shift, and go to state 23
    LIST  shift, and go to state 24


State 20

    9 func_dclr: func LP $@1 params . $@2 RP LB block RB
   13 params: params . SEPARATOR param

    SEPARATOR  shift, and go to state 25

    RP  reduce using rule 8 ($@2)

    $@2  go to state 26


State 21

   14 params: param .

    RP         reduce using rule 14 (params)
    SEPARATOR  reduce using rule 14 (params)


State 22

   12 func_dclr: func LP $@3 RP . LB $@4 block RB

    LB  shift, and go to state 27


State 23

   15 param: TYPE ID .

    RP         reduce using rule 15 (param)
    SEPARATOR  reduce using rule 15 (param)


State 24

   16 param: TYPE LIST . ID

    ID  shift, and go to state 28


State 25

   13 params: params SEPARATOR . param

    TYPE  shift, and go to state 19

    param  go to state 29


State 26

    9 func_dclr: func LP $@1 params $@2 . RP LB block RB

    RP  shift, and go to state 30


State 27

   12 func_dclr: func LP $@3 RP LB . $@4 block RB

    error    reduce using rule 11 ($@4)
    INT      reduce using rule 11 ($@4)
    FLOAT    reduce using rule 11 ($@4)
    TYPE     reduce using rule 11 ($@4)
    ID       reduce using rule 11 ($@4)
    IF       reduce using rule 11 ($@4)
    FOR      reduce using rule 11 ($@4)
    RETURN   reduce using rule 11 ($@4)
    OUT      reduce using rule 11 ($@4)
    IN       reduce using rule 11 ($@4)
    SS_OP    reduce using rule 11 ($@4)
    NIL      reduce using rule 11 ($@4)
    UN_OP    reduce using rule 11 ($@4)
    LITERAL  reduce using rule 11 ($@4)
    LB       reduce using rule 11 ($@4)
    LP       reduce using rule 11 ($@4)

    $@4  go to state 31


State 28

   16 param: TYPE LIST ID .

    RP         reduce using rule 16 (param)
    SEPARATOR  reduce using rule 16 (param)


State 29

   13 params: params SEPARATOR param .

    RP         reduce using rule 13 (params)
    SEPARATOR  reduce using rule 13 (params)


State 30

    9 func_dclr: func LP $@1 params $@2 RP . LB block RB

    LB  shift, and go to state 32


State 31

   12 func_dclr: func LP $@3 RP LB $@4 . block RB

    error    shift, and go to state 33
    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    TYPE     shift, and go to state 36
    ID       shift, and go to state 37
    FOR      shift, and go to state 38
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 46
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    declar     go to state 48
    block      go to state 49
    statement  go to state 50
    flow_ctr   go to state 51
    $@6        go to state 52
    expr       go to state 53
    for        go to state 54
    return     go to state 55
    input      go to state 56
    output     go to state 57
    ass_op     go to state 58
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 32

    9 func_dclr: func LP $@1 params $@2 RP LB . block RB

    error    shift, and go to state 33
    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    TYPE     shift, and go to state 36
    ID       shift, and go to state 37
    FOR      shift, and go to state 38
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 46
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    declar     go to state 48
    block      go to state 69
    statement  go to state 50
    flow_ctr   go to state 51
    $@6        go to state 52
    expr       go to state 53
    for        go to state 54
    return     go to state 55
    input      go to state 56
    output     go to state 57
    ass_op     go to state 58
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 33

   25 block: error .

    INT      reduce using rule 25 (block)
    FLOAT    reduce using rule 25 (block)
    TYPE     reduce using rule 25 (block)
    ID       reduce using rule 25 (block)
    IF       reduce using rule 25 (block)
    FOR      reduce using rule 25 (block)
    RETURN   reduce using rule 25 (block)
    OUT      reduce using rule 25 (block)
    IN       reduce using rule 25 (block)
    SS_OP    reduce using rule 25 (block)
    NIL      reduce using rule 25 (block)
    UN_OP    reduce using rule 25 (block)
    LITERAL  reduce using rule 25 (block)
    LB       reduce using rule 25 (block)
    RB       reduce using rule 25 (block)
    LP       reduce using rule 25 (block)


State 34

   67 val: INT .

    SS_OP      reduce using rule 67 (val)
    MD_OP      reduce using rule 67 (val)
    LLOG_OP    reduce using rule 67 (val)
    REL_OP     reduce using rule 67 (val)
    LIST_FUNC  reduce using rule 67 (val)
    RLIST_OP   reduce using rule 67 (val)
    END        reduce using rule 67 (val)


State 35

   68 val: FLOAT .

    SS_OP      reduce using rule 68 (val)
    MD_OP      reduce using rule 68 (val)
    LLOG_OP    reduce using rule 68 (val)
    REL_OP     reduce using rule 68 (val)
    LIST_FUNC  reduce using rule 68 (val)
    RLIST_OP   reduce using rule 68 (val)
    END        reduce using rule 68 (val)


State 36

   17 declar: TYPE . ID END
   18       | TYPE . LIST ID END

    ID    shift, and go to state 70
    LIST  shift, and go to state 71


State 37

   72 func_call: ID . LP $@11 func_params RP
   73          | ID . LP RP
   74 id: ID .

    LP  shift, and go to state 72

    SS_OP      reduce using rule 74 (id)
    MD_OP      reduce using rule 74 (id)
    LLOG_OP    reduce using rule 74 (id)
    REL_OP     reduce using rule 74 (id)
    ASS_OP     reduce using rule 74 (id)
    LIST_FUNC  reduce using rule 74 (id)
    RLIST_OP   reduce using rule 74 (id)
    END        reduce using rule 74 (id)


State 38

   44 for: FOR . LP ass_op END $@8 operation $@9 END ass_op RP $@10 statement

    LP  shift, and go to state 73


State 39

   45 return: RETURN . operation

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 139
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LP       shift, and go to state 47

    operation  go to state 74
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 75


State 40

   47 output: OUT . LP operation RP

    LP  shift, and go to state 76


State 41

   46 input: IN . LP id RP

    LP  shift, and go to state 77


State 42

   58 ari_op: SS_OP . md_op

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 139
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LP       shift, and go to state 47

    md_op      go to state 78
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 75


State 43

   69 val: NIL .

    SS_OP      reduce using rule 69 (val)
    MD_OP      reduce using rule 69 (val)
    LLOG_OP    reduce using rule 69 (val)
    REL_OP     reduce using rule 69 (val)
    LIST_FUNC  reduce using rule 69 (val)
    RLIST_OP   reduce using rule 69 (val)
    END        reduce using rule 69 (val)


State 44

   62 un_op: UN_OP . un_op

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 139
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LP       shift, and go to state 47

    un_op      go to state 79
    val        go to state 66
    func_call  go to state 67
    id         go to state 75


State 45

   70 val: LITERAL .

    SS_OP      reduce using rule 70 (val)
    MD_OP      reduce using rule 70 (val)
    LLOG_OP    reduce using rule 70 (val)
    REL_OP     reduce using rule 70 (val)
    LIST_FUNC  reduce using rule 70 (val)
    RLIST_OP   reduce using rule 70 (val)
    END        reduce using rule 70 (val)


State 46

   29 statement: LB . $@5 block RB

    error    reduce using rule 28 ($@5)
    INT      reduce using rule 28 ($@5)
    FLOAT    reduce using rule 28 ($@5)
    TYPE     reduce using rule 28 ($@5)
    ID       reduce using rule 28 ($@5)
    IF       reduce using rule 28 ($@5)
    FOR      reduce using rule 28 ($@5)
    RETURN   reduce using rule 28 ($@5)
    OUT      reduce using rule 28 ($@5)
    IN       reduce using rule 28 ($@5)
    SS_OP    reduce using rule 28 ($@5)
    NIL      reduce using rule 28 ($@5)
    UN_OP    reduce using rule 28 ($@5)
    LITERAL  reduce using rule 28 ($@5)
    LB       reduce using rule 28 ($@5)
    LP       reduce using rule 28 ($@5)

    $@5  go to state 80


State 47

   66 val: LP . operation RP

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    SS_OP    shift, and go to state 143
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    operation  go to state 81
    log_op     go to state 148
    rel_op     go to state 149
    list_op    go to state 150
    ari_op     go to state 151
    md_op      go to state 152
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 48

   24 block: declar .

    INT      reduce using rule 24 (block)
    FLOAT    reduce using rule 24 (block)
    TYPE     reduce using rule 24 (block)
    ID       reduce using rule 24 (block)
    IF       reduce using rule 24 (block)
    FOR      reduce using rule 24 (block)
    RETURN   reduce using rule 24 (block)
    OUT      reduce using rule 24 (block)
    IN       reduce using rule 24 (block)
    SS_OP    reduce using rule 24 (block)
    NIL      reduce using rule 24 (block)
    UN_OP    reduce using rule 24 (block)
    LITERAL  reduce using rule 24 (block)
    LB       reduce using rule 24 (block)
    RB       reduce using rule 24 (block)
    LP       reduce using rule 24 (block)


State 49

   12 func_dclr: func LP $@3 RP LB $@4 block . RB
   21 block: block . statement
   22      | block . declar

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    TYPE     shift, and go to state 36
    ID       shift, and go to state 37
    FOR      shift, and go to state 38
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 46
    RB       shift, and go to state 82
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    declar     go to state 83
    statement  go to state 84
    flow_ctr   go to state 51
    $@6        go to state 52
    expr       go to state 53
    for        go to state 54
    return     go to state 55
    input      go to state 56
    output     go to state 57
    ass_op     go to state 58
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 50

   23 block: statement .

    INT      reduce using rule 23 (block)
    FLOAT    reduce using rule 23 (block)
    TYPE     reduce using rule 23 (block)
    ID       reduce using rule 23 (block)
    IF       reduce using rule 23 (block)
    FOR      reduce using rule 23 (block)
    RETURN   reduce using rule 23 (block)
    OUT      reduce using rule 23 (block)
    IN       reduce using rule 23 (block)
    SS_OP    reduce using rule 23 (block)
    NIL      reduce using rule 23 (block)
    UN_OP    reduce using rule 23 (block)
    LITERAL  reduce using rule 23 (block)
    LB       reduce using rule 23 (block)
    RB       reduce using rule 23 (block)
    LP       reduce using rule 23 (block)


State 51

   30 statement: flow_ctr .

    INT      reduce using rule 30 (statement)
    FLOAT    reduce using rule 30 (statement)
    TYPE     reduce using rule 30 (statement)
    ID       reduce using rule 30 (statement)
    IF       reduce using rule 30 (statement)
    FOR      reduce using rule 30 (statement)
    RETURN   reduce using rule 30 (statement)
    OUT      reduce using rule 30 (statement)
    IN       reduce using rule 30 (statement)
    SS_OP    reduce using rule 30 (statement)
    NIL      reduce using rule 30 (statement)
    UN_OP    reduce using rule 30 (statement)
    LITERAL  reduce using rule 30 (statement)
    LB       reduce using rule 30 (statement)
    RB       reduce using rule 30 (statement)
    LP       reduce using rule 30 (statement)


State 52

   32 flow_ctr: $@6 . if_else

    IF  shift, and go to state 85

    if_else  go to state 86


State 53

   26 statement: expr . END

    END  shift, and go to state 87


State 54

   33 flow_ctr: for .

    INT      reduce using rule 33 (flow_ctr)
    FLOAT    reduce using rule 33 (flow_ctr)
    TYPE     reduce using rule 33 (flow_ctr)
    ID       reduce using rule 33 (flow_ctr)
    IF       reduce using rule 33 (flow_ctr)
    FOR      reduce using rule 33 (flow_ctr)
    RETURN   reduce using rule 33 (flow_ctr)
    OUT      reduce using rule 33 (flow_ctr)
    IN       reduce using rule 33 (flow_ctr)
    SS_OP    reduce using rule 33 (flow_ctr)
    NIL      reduce using rule 33 (flow_ctr)
    UN_OP    reduce using rule 33 (flow_ctr)
    LITERAL  reduce using rule 33 (flow_ctr)
    LB       reduce using rule 33 (flow_ctr)
    RB       reduce using rule 33 (flow_ctr)
    LP       reduce using rule 33 (flow_ctr)


State 55

   34 flow_ctr: return . END

    END  shift, and go to state 88


State 56

   36 expr: input .

    END  reduce using rule 36 (expr)


State 57

   37 expr: output .

    END  reduce using rule 37 (expr)


State 58

   27 statement: ass_op . END

    END  shift, and go to state 89


State 59

   35 expr: operation .

    END  reduce using rule 35 (expr)


State 60

   49 operation: log_op .
   50 log_op: log_op . LLOG_OP rel_op

    LLOG_OP  shift, and go to state 90

    END  reduce using rule 49 (operation)


State 61

   51 log_op: rel_op .
   52 rel_op: rel_op . REL_OP list_op

    REL_OP  shift, and go to state 91

    LLOG_OP  reduce using rule 51 (log_op)
    END      reduce using rule 51 (log_op)


State 62

   53 rel_op: list_op .

    LLOG_OP  reduce using rule 53 (rel_op)
    REL_OP   reduce using rule 53 (rel_op)
    END      reduce using rule 53 (rel_op)


State 63

   54 list_op: ari_op . LIST_FUNC list_op
   55        | ari_op . RLIST_OP list_op
   56        | ari_op .
   57 ari_op: ari_op . SS_OP md_op

    SS_OP      shift, and go to state 92
    LIST_FUNC  shift, and go to state 93
    RLIST_OP   shift, and go to state 94

    LLOG_OP  reduce using rule 56 (list_op)
    REL_OP   reduce using rule 56 (list_op)
    END      reduce using rule 56 (list_op)


State 64

   59 ari_op: md_op .
   60 md_op: md_op . MD_OP un_op

    MD_OP  shift, and go to state 95

    SS_OP      reduce using rule 59 (ari_op)
    LLOG_OP    reduce using rule 59 (ari_op)
    REL_OP     reduce using rule 59 (ari_op)
    LIST_FUNC  reduce using rule 59 (ari_op)
    RLIST_OP   reduce using rule 59 (ari_op)
    END        reduce using rule 59 (ari_op)


State 65

   61 md_op: un_op .

    SS_OP      reduce using rule 61 (md_op)
    MD_OP      reduce using rule 61 (md_op)
    LLOG_OP    reduce using rule 61 (md_op)
    REL_OP     reduce using rule 61 (md_op)
    LIST_FUNC  reduce using rule 61 (md_op)
    RLIST_OP   reduce using rule 61 (md_op)
    END        reduce using rule 61 (md_op)


State 66

   63 un_op: val .

    SS_OP      reduce using rule 63 (un_op)
    MD_OP      reduce using rule 63 (un_op)
    LLOG_OP    reduce using rule 63 (un_op)
    REL_OP     reduce using rule 63 (un_op)
    LIST_FUNC  reduce using rule 63 (un_op)
    RLIST_OP   reduce using rule 63 (un_op)
    END        reduce using rule 63 (un_op)


State 67

   65 val: func_call .

    SS_OP      reduce using rule 65 (val)
    MD_OP      reduce using rule 65 (val)
    LLOG_OP    reduce using rule 65 (val)
    REL_OP     reduce using rule 65 (val)
    LIST_FUNC  reduce using rule 65 (val)
    RLIST_OP   reduce using rule 65 (val)
    END        reduce using rule 65 (val)


State 68

   48 ass_op: id . ASS_OP operation
   64 val: id .

    ASS_OP  shift, and go to state 96

    SS_OP      reduce using rule 64 (val)
    MD_OP      reduce using rule 64 (val)
    LLOG_OP    reduce using rule 64 (val)
    REL_OP     reduce using rule 64 (val)
    LIST_FUNC  reduce using rule 64 (val)
    RLIST_OP   reduce using rule 64 (val)
    END        reduce using rule 64 (val)


State 69

    9 func_dclr: func LP $@1 params $@2 RP LB block . RB
   21 block: block . statement
   22      | block . declar

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    TYPE     shift, and go to state 36
    ID       shift, and go to state 37
    FOR      shift, and go to state 38
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 46
    RB       shift, and go to state 97
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    declar     go to state 83
    statement  go to state 84
    flow_ctr   go to state 51
    $@6        go to state 52
    expr       go to state 53
    for        go to state 54
    return     go to state 55
    input      go to state 56
    output     go to state 57
    ass_op     go to state 58
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 70

   17 declar: TYPE ID . END

    END  shift, and go to state 157


State 71

   18 declar: TYPE LIST . ID END

    ID  shift, and go to state 98


State 72

   72 func_call: ID LP . $@11 func_params RP
   73          | ID LP . RP

    RP  shift, and go to state 99

    INT      reduce using rule 71 ($@11)
    FLOAT    reduce using rule 71 ($@11)
    ID       reduce using rule 71 ($@11)
    SS_OP    reduce using rule 71 ($@11)
    NIL      reduce using rule 71 ($@11)
    UN_OP    reduce using rule 71 ($@11)
    LITERAL  reduce using rule 71 ($@11)
    LP       reduce using rule 71 ($@11)

    $@11  go to state 100


State 73

   44 for: FOR LP . ass_op END $@8 operation $@9 END ass_op RP $@10 statement

    ID  shift, and go to state 101

    ass_op  go to state 102
    id      go to state 103


State 74

   45 return: RETURN operation .

    END  reduce using rule 45 (return)


State 75

   64 val: id .

    SS_OP      reduce using rule 64 (val)
    MD_OP      reduce using rule 64 (val)
    LLOG_OP    reduce using rule 64 (val)
    REL_OP     reduce using rule 64 (val)
    LIST_FUNC  reduce using rule 64 (val)
    RLIST_OP   reduce using rule 64 (val)
    END        reduce using rule 64 (val)


State 76

   47 output: OUT LP . operation RP

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    SS_OP    shift, and go to state 143
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    operation  go to state 104
    log_op     go to state 148
    rel_op     go to state 149
    list_op    go to state 150
    ari_op     go to state 151
    md_op      go to state 152
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 77

   46 input: IN LP . id RP

    ID  shift, and go to state 158

    id  go to state 105


State 78

   58 ari_op: SS_OP md_op .
   60 md_op: md_op . MD_OP un_op

    MD_OP  shift, and go to state 95

    SS_OP      reduce using rule 58 (ari_op)
    LLOG_OP    reduce using rule 58 (ari_op)
    REL_OP     reduce using rule 58 (ari_op)
    LIST_FUNC  reduce using rule 58 (ari_op)
    RLIST_OP   reduce using rule 58 (ari_op)
    END        reduce using rule 58 (ari_op)


State 79

   62 un_op: UN_OP un_op .

    SS_OP      reduce using rule 62 (un_op)
    MD_OP      reduce using rule 62 (un_op)
    LLOG_OP    reduce using rule 62 (un_op)
    REL_OP     reduce using rule 62 (un_op)
    LIST_FUNC  reduce using rule 62 (un_op)
    RLIST_OP   reduce using rule 62 (un_op)
    END        reduce using rule 62 (un_op)


State 80

   29 statement: LB $@5 . block RB

    error    shift, and go to state 33
    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    TYPE     shift, and go to state 36
    ID       shift, and go to state 37
    FOR      shift, and go to state 38
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 46
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    declar     go to state 48
    block      go to state 106
    statement  go to state 50
    flow_ctr   go to state 51
    $@6        go to state 52
    expr       go to state 53
    for        go to state 54
    return     go to state 55
    input      go to state 56
    output     go to state 57
    ass_op     go to state 58
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 81

   66 val: LP operation . RP

    RP  shift, and go to state 107


State 82

   12 func_dclr: func LP $@3 RP LB $@4 block RB .

    $end  reduce using rule 12 (func_dclr)
    TYPE  reduce using rule 12 (func_dclr)


State 83

   22 block: block declar .

    INT      reduce using rule 22 (block)
    FLOAT    reduce using rule 22 (block)
    TYPE     reduce using rule 22 (block)
    ID       reduce using rule 22 (block)
    IF       reduce using rule 22 (block)
    FOR      reduce using rule 22 (block)
    RETURN   reduce using rule 22 (block)
    OUT      reduce using rule 22 (block)
    IN       reduce using rule 22 (block)
    SS_OP    reduce using rule 22 (block)
    NIL      reduce using rule 22 (block)
    UN_OP    reduce using rule 22 (block)
    LITERAL  reduce using rule 22 (block)
    LB       reduce using rule 22 (block)
    RB       reduce using rule 22 (block)
    LP       reduce using rule 22 (block)


State 84

   21 block: block statement .

    INT      reduce using rule 21 (block)
    FLOAT    reduce using rule 21 (block)
    TYPE     reduce using rule 21 (block)
    ID       reduce using rule 21 (block)
    IF       reduce using rule 21 (block)
    FOR      reduce using rule 21 (block)
    RETURN   reduce using rule 21 (block)
    OUT      reduce using rule 21 (block)
    IN       reduce using rule 21 (block)
    SS_OP    reduce using rule 21 (block)
    NIL      reduce using rule 21 (block)
    UN_OP    reduce using rule 21 (block)
    LITERAL  reduce using rule 21 (block)
    LB       reduce using rule 21 (block)
    RB       reduce using rule 21 (block)
    LP       reduce using rule 21 (block)


State 85

   38 if_else: IF . LP operation RP statement
   40        | IF . LP operation RP statement ELSE $@7 statement

    LP  shift, and go to state 108


State 86

   32 flow_ctr: $@6 if_else .

    INT      reduce using rule 32 (flow_ctr)
    FLOAT    reduce using rule 32 (flow_ctr)
    TYPE     reduce using rule 32 (flow_ctr)
    ID       reduce using rule 32 (flow_ctr)
    IF       reduce using rule 32 (flow_ctr)
    FOR      reduce using rule 32 (flow_ctr)
    RETURN   reduce using rule 32 (flow_ctr)
    OUT      reduce using rule 32 (flow_ctr)
    IN       reduce using rule 32 (flow_ctr)
    SS_OP    reduce using rule 32 (flow_ctr)
    NIL      reduce using rule 32 (flow_ctr)
    UN_OP    reduce using rule 32 (flow_ctr)
    LITERAL  reduce using rule 32 (flow_ctr)
    LB       reduce using rule 32 (flow_ctr)
    RB       reduce using rule 32 (flow_ctr)
    LP       reduce using rule 32 (flow_ctr)


State 87

   26 statement: expr END .

    INT      reduce using rule 26 (statement)
    FLOAT    reduce using rule 26 (statement)
    TYPE     reduce using rule 26 (statement)
    ID       reduce using rule 26 (statement)
    IF       reduce using rule 26 (statement)
    FOR      reduce using rule 26 (statement)
    RETURN   reduce using rule 26 (statement)
    OUT      reduce using rule 26 (statement)
    IN       reduce using rule 26 (statement)
    SS_OP    reduce using rule 26 (statement)
    NIL      reduce using rule 26 (statement)
    UN_OP    reduce using rule 26 (statement)
    LITERAL  reduce using rule 26 (statement)
    LB       reduce using rule 26 (statement)
    RB       reduce using rule 26 (statement)
    LP       reduce using rule 26 (statement)


State 88

   34 flow_ctr: return END .

    INT      reduce using rule 34 (flow_ctr)
    FLOAT    reduce using rule 34 (flow_ctr)
    TYPE     reduce using rule 34 (flow_ctr)
    ID       reduce using rule 34 (flow_ctr)
    IF       reduce using rule 34 (flow_ctr)
    FOR      reduce using rule 34 (flow_ctr)
    RETURN   reduce using rule 34 (flow_ctr)
    OUT      reduce using rule 34 (flow_ctr)
    IN       reduce using rule 34 (flow_ctr)
    SS_OP    reduce using rule 34 (flow_ctr)
    NIL      reduce using rule 34 (flow_ctr)
    UN_OP    reduce using rule 34 (flow_ctr)
    LITERAL  reduce using rule 34 (flow_ctr)
    LB       reduce using rule 34 (flow_ctr)
    RB       reduce using rule 34 (flow_ctr)
    LP       reduce using rule 34 (flow_ctr)


State 89

   27 statement: ass_op END .

    INT      reduce using rule 27 (statement)
    FLOAT    reduce using rule 27 (statement)
    TYPE     reduce using rule 27 (statement)
    ID       reduce using rule 27 (statement)
    IF       reduce using rule 27 (statement)
    FOR      reduce using rule 27 (statement)
    RETURN   reduce using rule 27 (statement)
    OUT      reduce using rule 27 (statement)
    IN       reduce using rule 27 (statement)
    SS_OP    reduce using rule 27 (statement)
    NIL      reduce using rule 27 (statement)
    UN_OP    reduce using rule 27 (statement)
    LITERAL  reduce using rule 27 (statement)
    LB       reduce using rule 27 (statement)
    RB       reduce using rule 27 (statement)
    LP       reduce using rule 27 (statement)


State 90

   50 log_op: log_op LLOG_OP . rel_op

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 139
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LP       shift, and go to state 47

    rel_op     go to state 109
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 75


State 91

   52 rel_op: rel_op REL_OP . list_op

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 139
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LP       shift, and go to state 47

    list_op    go to state 110
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 75


State 92

   57 ari_op: ari_op SS_OP . md_op

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 139
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LP       shift, and go to state 47

    md_op      go to state 111
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 75


State 93

   54 list_op: ari_op LIST_FUNC . list_op

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 139
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LP       shift, and go to state 47

    list_op    go to state 112
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 75


State 94

   55 list_op: ari_op RLIST_OP . list_op

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 139
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LP       shift, and go to state 47

    list_op    go to state 113
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 75


State 95

   60 md_op: md_op MD_OP . un_op

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 139
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LP       shift, and go to state 47

    un_op      go to state 114
    val        go to state 66
    func_call  go to state 67
    id         go to state 75


State 96

   48 ass_op: id ASS_OP . operation

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 139
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LP       shift, and go to state 47

    operation  go to state 115
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 75


State 97

    9 func_dclr: func LP $@1 params $@2 RP LB block RB .

    $end  reduce using rule 9 (func_dclr)
    TYPE  reduce using rule 9 (func_dclr)


State 98

   18 declar: TYPE LIST ID . END

    END  shift, and go to state 159


State 99

   73 func_call: ID LP RP .

    SS_OP      reduce using rule 73 (func_call)
    MD_OP      reduce using rule 73 (func_call)
    LLOG_OP    reduce using rule 73 (func_call)
    REL_OP     reduce using rule 73 (func_call)
    LIST_FUNC  reduce using rule 73 (func_call)
    RLIST_OP   reduce using rule 73 (func_call)
    END        reduce using rule 73 (func_call)


State 100

   72 func_call: ID LP $@11 . func_params RP

    INT      shift, and go to state 160
    FLOAT    shift, and go to state 161
    ID       shift, and go to state 162
    SS_OP    shift, and go to state 163
    NIL      shift, and go to state 164
    UN_OP    shift, and go to state 165
    LITERAL  shift, and go to state 166
    LP       shift, and go to state 167

    operation    go to state 116
    log_op       go to state 168
    rel_op       go to state 169
    list_op      go to state 170
    ari_op       go to state 171
    md_op        go to state 172
    un_op        go to state 173
    val          go to state 174
    func_call    go to state 175
    id           go to state 176
    func_params  go to state 117


State 101

   74 id: ID .

    ASS_OP  reduce using rule 74 (id)


State 102

   44 for: FOR LP ass_op . END $@8 operation $@9 END ass_op RP $@10 statement

    END  shift, and go to state 118


State 103

   48 ass_op: id . ASS_OP operation

    ASS_OP  shift, and go to state 96


State 104

   47 output: OUT LP operation . RP

    RP  shift, and go to state 119


State 105

   46 input: IN LP id . RP

    RP  shift, and go to state 120


State 106

   21 block: block . statement
   22      | block . declar
   29 statement: LB $@5 block . RB

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    TYPE     shift, and go to state 36
    ID       shift, and go to state 37
    FOR      shift, and go to state 38
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 46
    RB       shift, and go to state 121
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    declar     go to state 83
    statement  go to state 84
    flow_ctr   go to state 51
    $@6        go to state 52
    expr       go to state 53
    for        go to state 54
    return     go to state 55
    input      go to state 56
    output     go to state 57
    ass_op     go to state 58
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 107

   66 val: LP operation RP .

    SS_OP      reduce using rule 66 (val)
    MD_OP      reduce using rule 66 (val)
    LLOG_OP    reduce using rule 66 (val)
    REL_OP     reduce using rule 66 (val)
    LIST_FUNC  reduce using rule 66 (val)
    RLIST_OP   reduce using rule 66 (val)
    END        reduce using rule 66 (val)


State 108

   38 if_else: IF LP . operation RP statement
   40        | IF LP . operation RP statement ELSE $@7 statement

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    SS_OP    shift, and go to state 143
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    operation  go to state 122
    log_op     go to state 148
    rel_op     go to state 149
    list_op    go to state 150
    ari_op     go to state 151
    md_op      go to state 152
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 109

   50 log_op: log_op LLOG_OP rel_op .
   52 rel_op: rel_op . REL_OP list_op

    REL_OP  shift, and go to state 91

    LLOG_OP  reduce using rule 50 (log_op)
    END      reduce using rule 50 (log_op)


State 110

   52 rel_op: rel_op REL_OP list_op .

    LLOG_OP  reduce using rule 52 (rel_op)
    REL_OP   reduce using rule 52 (rel_op)
    END      reduce using rule 52 (rel_op)


State 111

   57 ari_op: ari_op SS_OP md_op .
   60 md_op: md_op . MD_OP un_op

    MD_OP  shift, and go to state 95

    SS_OP      reduce using rule 57 (ari_op)
    LLOG_OP    reduce using rule 57 (ari_op)
    REL_OP     reduce using rule 57 (ari_op)
    LIST_FUNC  reduce using rule 57 (ari_op)
    RLIST_OP   reduce using rule 57 (ari_op)
    END        reduce using rule 57 (ari_op)


State 112

   54 list_op: ari_op LIST_FUNC list_op .

    LLOG_OP  reduce using rule 54 (list_op)
    REL_OP   reduce using rule 54 (list_op)
    END      reduce using rule 54 (list_op)


State 113

   55 list_op: ari_op RLIST_OP list_op .

    LLOG_OP  reduce using rule 55 (list_op)
    REL_OP   reduce using rule 55 (list_op)
    END      reduce using rule 55 (list_op)


State 114

   60 md_op: md_op MD_OP un_op .

    SS_OP      reduce using rule 60 (md_op)
    MD_OP      reduce using rule 60 (md_op)
    LLOG_OP    reduce using rule 60 (md_op)
    REL_OP     reduce using rule 60 (md_op)
    LIST_FUNC  reduce using rule 60 (md_op)
    RLIST_OP   reduce using rule 60 (md_op)
    END        reduce using rule 60 (md_op)


State 115

   48 ass_op: id ASS_OP operation .

    END  reduce using rule 48 (ass_op)


State 116

   76 func_params: operation .

    RP         reduce using rule 76 (func_params)
    SEPARATOR  reduce using rule 76 (func_params)


State 117

   72 func_call: ID LP $@11 func_params . RP
   75 func_params: func_params . SEPARATOR operation

    RP         shift, and go to state 123
    SEPARATOR  shift, and go to state 124


State 118

   44 for: FOR LP ass_op END . $@8 operation $@9 END ass_op RP $@10 statement

    INT      reduce using rule 41 ($@8)
    FLOAT    reduce using rule 41 ($@8)
    ID       reduce using rule 41 ($@8)
    SS_OP    reduce using rule 41 ($@8)
    NIL      reduce using rule 41 ($@8)
    UN_OP    reduce using rule 41 ($@8)
    LITERAL  reduce using rule 41 ($@8)
    LP       reduce using rule 41 ($@8)

    $@8  go to state 125


State 119

   47 output: OUT LP operation RP .

    END  reduce using rule 47 (output)


State 120

   46 input: IN LP id RP .

    END  reduce using rule 46 (input)


State 121

   29 statement: LB $@5 block RB .

    INT      reduce using rule 29 (statement)
    FLOAT    reduce using rule 29 (statement)
    TYPE     reduce using rule 29 (statement)
    ID       reduce using rule 29 (statement)
    IF       reduce using rule 29 (statement)
    FOR      reduce using rule 29 (statement)
    RETURN   reduce using rule 29 (statement)
    OUT      reduce using rule 29 (statement)
    IN       reduce using rule 29 (statement)
    SS_OP    reduce using rule 29 (statement)
    NIL      reduce using rule 29 (statement)
    UN_OP    reduce using rule 29 (statement)
    LITERAL  reduce using rule 29 (statement)
    LB       reduce using rule 29 (statement)
    RB       reduce using rule 29 (statement)
    LP       reduce using rule 29 (statement)


State 122

   38 if_else: IF LP operation . RP statement
   40        | IF LP operation . RP statement ELSE $@7 statement

    RP  shift, and go to state 126


State 123

   72 func_call: ID LP $@11 func_params RP .

    SS_OP      reduce using rule 72 (func_call)
    MD_OP      reduce using rule 72 (func_call)
    LLOG_OP    reduce using rule 72 (func_call)
    REL_OP     reduce using rule 72 (func_call)
    LIST_FUNC  reduce using rule 72 (func_call)
    RLIST_OP   reduce using rule 72 (func_call)
    END        reduce using rule 72 (func_call)


State 124

   75 func_params: func_params SEPARATOR . operation

    INT      shift, and go to state 160
    FLOAT    shift, and go to state 161
    ID       shift, and go to state 162
    SS_OP    shift, and go to state 163
    NIL      shift, and go to state 164
    UN_OP    shift, and go to state 165
    LITERAL  shift, and go to state 166
    LP       shift, and go to state 167

    operation  go to state 127
    log_op     go to state 168
    rel_op     go to state 169
    list_op    go to state 170
    ari_op     go to state 171
    md_op      go to state 172
    un_op      go to state 173
    val        go to state 174
    func_call  go to state 175
    id         go to state 176


State 125

   44 for: FOR LP ass_op END $@8 . operation $@9 END ass_op RP $@10 statement

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 139
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LP       shift, and go to state 47

    operation  go to state 128
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 75


State 126

   38 if_else: IF LP operation RP . statement
   40        | IF LP operation RP . statement ELSE $@7 statement

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 37
    FOR      shift, and go to state 177
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 178
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    statement  go to state 129
    flow_ctr   go to state 179
    $@6        go to state 180
    expr       go to state 181
    for        go to state 182
    return     go to state 183
    input      go to state 56
    output     go to state 57
    ass_op     go to state 184
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 127

   75 func_params: func_params SEPARATOR operation .

    RP         reduce using rule 75 (func_params)
    SEPARATOR  reduce using rule 75 (func_params)


State 128

   44 for: FOR LP ass_op END $@8 operation . $@9 END ass_op RP $@10 statement

    END  reduce using rule 42 ($@9)

    $@9  go to state 130


State 129

   38 if_else: IF LP operation RP statement .
   40        | IF LP operation RP statement . ELSE $@7 statement

    ELSE  shift, and go to state 131

    INT      reduce using rule 38 (if_else)
    FLOAT    reduce using rule 38 (if_else)
    TYPE     reduce using rule 38 (if_else)
    ID       reduce using rule 38 (if_else)
    IF       reduce using rule 38 (if_else)
    FOR      reduce using rule 38 (if_else)
    RETURN   reduce using rule 38 (if_else)
    OUT      reduce using rule 38 (if_else)
    IN       reduce using rule 38 (if_else)
    SS_OP    reduce using rule 38 (if_else)
    NIL      reduce using rule 38 (if_else)
    UN_OP    reduce using rule 38 (if_else)
    LITERAL  reduce using rule 38 (if_else)
    LB       reduce using rule 38 (if_else)
    RB       reduce using rule 38 (if_else)
    LP       reduce using rule 38 (if_else)


State 130

   44 for: FOR LP ass_op END $@8 operation $@9 . END ass_op RP $@10 statement

    END  shift, and go to state 132


State 131

   40 if_else: IF LP operation RP statement ELSE . $@7 statement

    INT      reduce using rule 39 ($@7)
    FLOAT    reduce using rule 39 ($@7)
    ID       reduce using rule 39 ($@7)
    IF       reduce using rule 39 ($@7)
    FOR      reduce using rule 39 ($@7)
    RETURN   reduce using rule 39 ($@7)
    OUT      reduce using rule 39 ($@7)
    IN       reduce using rule 39 ($@7)
    SS_OP    reduce using rule 39 ($@7)
    NIL      reduce using rule 39 ($@7)
    UN_OP    reduce using rule 39 ($@7)
    LITERAL  reduce using rule 39 ($@7)
    LB       reduce using rule 39 ($@7)
    LP       reduce using rule 39 ($@7)

    $@7  go to state 133


State 132

   44 for: FOR LP ass_op END $@8 operation $@9 END . ass_op RP $@10 statement

    ID  shift, and go to state 101

    ass_op  go to state 134
    id      go to state 185


State 133

   40 if_else: IF LP operation RP statement ELSE $@7 . statement

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 37
    FOR      shift, and go to state 38
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 46
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    statement  go to state 135
    flow_ctr   go to state 51
    $@6        go to state 52
    expr       go to state 53
    for        go to state 54
    return     go to state 55
    input      go to state 56
    output     go to state 57
    ass_op     go to state 58
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 134

   44 for: FOR LP ass_op END $@8 operation $@9 END ass_op . RP $@10 statement

    RP  shift, and go to state 136


State 135

   40 if_else: IF LP operation RP statement ELSE $@7 statement .

    INT      reduce using rule 40 (if_else)
    FLOAT    reduce using rule 40 (if_else)
    TYPE     reduce using rule 40 (if_else)
    ID       reduce using rule 40 (if_else)
    IF       reduce using rule 40 (if_else)
    FOR      reduce using rule 40 (if_else)
    RETURN   reduce using rule 40 (if_else)
    OUT      reduce using rule 40 (if_else)
    IN       reduce using rule 40 (if_else)
    SS_OP    reduce using rule 40 (if_else)
    NIL      reduce using rule 40 (if_else)
    UN_OP    reduce using rule 40 (if_else)
    LITERAL  reduce using rule 40 (if_else)
    LB       reduce using rule 40 (if_else)
    RB       reduce using rule 40 (if_else)
    LP       reduce using rule 40 (if_else)


State 136

   44 for: FOR LP ass_op END $@8 operation $@9 END ass_op RP . $@10 statement

    INT      reduce using rule 43 ($@10)
    FLOAT    reduce using rule 43 ($@10)
    ID       reduce using rule 43 ($@10)
    IF       reduce using rule 43 ($@10)
    FOR      reduce using rule 43 ($@10)
    RETURN   reduce using rule 43 ($@10)
    OUT      reduce using rule 43 ($@10)
    IN       reduce using rule 43 ($@10)
    SS_OP    reduce using rule 43 ($@10)
    NIL      reduce using rule 43 ($@10)
    UN_OP    reduce using rule 43 ($@10)
    LITERAL  reduce using rule 43 ($@10)
    LB       reduce using rule 43 ($@10)
    LP       reduce using rule 43 ($@10)

    $@10  go to state 137


State 137

   44 for: FOR LP ass_op END $@8 operation $@9 END ass_op RP $@10 . statement

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 37
    FOR      shift, and go to state 38
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 46
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    statement  go to state 138
    flow_ctr   go to state 51
    $@6        go to state 52
    expr       go to state 53
    for        go to state 54
    return     go to state 55
    input      go to state 56
    output     go to state 57
    ass_op     go to state 58
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 138

   44 for: FOR LP ass_op END $@8 operation $@9 END ass_op RP $@10 statement .

    INT      reduce using rule 44 (for)
    FLOAT    reduce using rule 44 (for)
    TYPE     reduce using rule 44 (for)
    ID       reduce using rule 44 (for)
    IF       reduce using rule 44 (for)
    FOR      reduce using rule 44 (for)
    RETURN   reduce using rule 44 (for)
    OUT      reduce using rule 44 (for)
    IN       reduce using rule 44 (for)
    SS_OP    reduce using rule 44 (for)
    NIL      reduce using rule 44 (for)
    UN_OP    reduce using rule 44 (for)
    LITERAL  reduce using rule 44 (for)
    LB       reduce using rule 44 (for)
    RB       reduce using rule 44 (for)
    LP       reduce using rule 44 (for)


State 139

   72 func_call: ID . LP $@11 func_params RP
   73          | ID . LP RP
   74 id: ID .

    LP  shift, and go to state 72

    SS_OP      reduce using rule 74 (id)
    MD_OP      reduce using rule 74 (id)
    LLOG_OP    reduce using rule 74 (id)
    REL_OP     reduce using rule 74 (id)
    LIST_FUNC  reduce using rule 74 (id)
    RLIST_OP   reduce using rule 74 (id)
    END        reduce using rule 74 (id)


State 140

   67 val: INT .

    SS_OP      reduce using rule 67 (val)
    MD_OP      reduce using rule 67 (val)
    LLOG_OP    reduce using rule 67 (val)
    REL_OP     reduce using rule 67 (val)
    LIST_FUNC  reduce using rule 67 (val)
    RLIST_OP   reduce using rule 67 (val)
    RP         reduce using rule 67 (val)


State 141

   68 val: FLOAT .

    SS_OP      reduce using rule 68 (val)
    MD_OP      reduce using rule 68 (val)
    LLOG_OP    reduce using rule 68 (val)
    REL_OP     reduce using rule 68 (val)
    LIST_FUNC  reduce using rule 68 (val)
    RLIST_OP   reduce using rule 68 (val)
    RP         reduce using rule 68 (val)


State 142

   72 func_call: ID . LP $@11 func_params RP
   73          | ID . LP RP
   74 id: ID .

    LP  shift, and go to state 186

    SS_OP      reduce using rule 74 (id)
    MD_OP      reduce using rule 74 (id)
    LLOG_OP    reduce using rule 74 (id)
    REL_OP     reduce using rule 74 (id)
    LIST_FUNC  reduce using rule 74 (id)
    RLIST_OP   reduce using rule 74 (id)
    RP         reduce using rule 74 (id)


State 143

   58 ari_op: SS_OP . md_op

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    md_op      go to state 187
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 144

   69 val: NIL .

    SS_OP      reduce using rule 69 (val)
    MD_OP      reduce using rule 69 (val)
    LLOG_OP    reduce using rule 69 (val)
    REL_OP     reduce using rule 69 (val)
    LIST_FUNC  reduce using rule 69 (val)
    RLIST_OP   reduce using rule 69 (val)
    RP         reduce using rule 69 (val)


State 145

   62 un_op: UN_OP . un_op

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    un_op      go to state 188
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 146

   70 val: LITERAL .

    SS_OP      reduce using rule 70 (val)
    MD_OP      reduce using rule 70 (val)
    LLOG_OP    reduce using rule 70 (val)
    REL_OP     reduce using rule 70 (val)
    LIST_FUNC  reduce using rule 70 (val)
    RLIST_OP   reduce using rule 70 (val)
    RP         reduce using rule 70 (val)


State 147

   66 val: LP . operation RP

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    SS_OP    shift, and go to state 143
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    operation  go to state 189
    log_op     go to state 148
    rel_op     go to state 149
    list_op    go to state 150
    ari_op     go to state 151
    md_op      go to state 152
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 148

   49 operation: log_op .
   50 log_op: log_op . LLOG_OP rel_op

    LLOG_OP  shift, and go to state 190

    RP  reduce using rule 49 (operation)


State 149

   51 log_op: rel_op .
   52 rel_op: rel_op . REL_OP list_op

    REL_OP  shift, and go to state 191

    LLOG_OP  reduce using rule 51 (log_op)
    RP       reduce using rule 51 (log_op)


State 150

   53 rel_op: list_op .

    LLOG_OP  reduce using rule 53 (rel_op)
    REL_OP   reduce using rule 53 (rel_op)
    RP       reduce using rule 53 (rel_op)


State 151

   54 list_op: ari_op . LIST_FUNC list_op
   55        | ari_op . RLIST_OP list_op
   56        | ari_op .
   57 ari_op: ari_op . SS_OP md_op

    SS_OP      shift, and go to state 192
    LIST_FUNC  shift, and go to state 193
    RLIST_OP   shift, and go to state 194

    LLOG_OP  reduce using rule 56 (list_op)
    REL_OP   reduce using rule 56 (list_op)
    RP       reduce using rule 56 (list_op)


State 152

   59 ari_op: md_op .
   60 md_op: md_op . MD_OP un_op

    MD_OP  shift, and go to state 195

    SS_OP      reduce using rule 59 (ari_op)
    LLOG_OP    reduce using rule 59 (ari_op)
    REL_OP     reduce using rule 59 (ari_op)
    LIST_FUNC  reduce using rule 59 (ari_op)
    RLIST_OP   reduce using rule 59 (ari_op)
    RP         reduce using rule 59 (ari_op)


State 153

   61 md_op: un_op .

    SS_OP      reduce using rule 61 (md_op)
    MD_OP      reduce using rule 61 (md_op)
    LLOG_OP    reduce using rule 61 (md_op)
    REL_OP     reduce using rule 61 (md_op)
    LIST_FUNC  reduce using rule 61 (md_op)
    RLIST_OP   reduce using rule 61 (md_op)
    RP         reduce using rule 61 (md_op)


State 154

   63 un_op: val .

    SS_OP      reduce using rule 63 (un_op)
    MD_OP      reduce using rule 63 (un_op)
    LLOG_OP    reduce using rule 63 (un_op)
    REL_OP     reduce using rule 63 (un_op)
    LIST_FUNC  reduce using rule 63 (un_op)
    RLIST_OP   reduce using rule 63 (un_op)
    RP         reduce using rule 63 (un_op)


State 155

   65 val: func_call .

    SS_OP      reduce using rule 65 (val)
    MD_OP      reduce using rule 65 (val)
    LLOG_OP    reduce using rule 65 (val)
    REL_OP     reduce using rule 65 (val)
    LIST_FUNC  reduce using rule 65 (val)
    RLIST_OP   reduce using rule 65 (val)
    RP         reduce using rule 65 (val)


State 156

   64 val: id .

    SS_OP      reduce using rule 64 (val)
    MD_OP      reduce using rule 64 (val)
    LLOG_OP    reduce using rule 64 (val)
    REL_OP     reduce using rule 64 (val)
    LIST_FUNC  reduce using rule 64 (val)
    RLIST_OP   reduce using rule 64 (val)
    RP         reduce using rule 64 (val)


State 157

   17 declar: TYPE ID END .

    INT      reduce using rule 17 (declar)
    FLOAT    reduce using rule 17 (declar)
    TYPE     reduce using rule 17 (declar)
    ID       reduce using rule 17 (declar)
    IF       reduce using rule 17 (declar)
    FOR      reduce using rule 17 (declar)
    RETURN   reduce using rule 17 (declar)
    OUT      reduce using rule 17 (declar)
    IN       reduce using rule 17 (declar)
    SS_OP    reduce using rule 17 (declar)
    NIL      reduce using rule 17 (declar)
    UN_OP    reduce using rule 17 (declar)
    LITERAL  reduce using rule 17 (declar)
    LB       reduce using rule 17 (declar)
    RB       reduce using rule 17 (declar)
    LP       reduce using rule 17 (declar)


State 158

   74 id: ID .

    RP  reduce using rule 74 (id)


State 159

   18 declar: TYPE LIST ID END .

    INT      reduce using rule 18 (declar)
    FLOAT    reduce using rule 18 (declar)
    TYPE     reduce using rule 18 (declar)
    ID       reduce using rule 18 (declar)
    IF       reduce using rule 18 (declar)
    FOR      reduce using rule 18 (declar)
    RETURN   reduce using rule 18 (declar)
    OUT      reduce using rule 18 (declar)
    IN       reduce using rule 18 (declar)
    SS_OP    reduce using rule 18 (declar)
    NIL      reduce using rule 18 (declar)
    UN_OP    reduce using rule 18 (declar)
    LITERAL  reduce using rule 18 (declar)
    LB       reduce using rule 18 (declar)
    RB       reduce using rule 18 (declar)
    LP       reduce using rule 18 (declar)


State 160

   67 val: INT .

    SS_OP      reduce using rule 67 (val)
    MD_OP      reduce using rule 67 (val)
    LLOG_OP    reduce using rule 67 (val)
    REL_OP     reduce using rule 67 (val)
    LIST_FUNC  reduce using rule 67 (val)
    RLIST_OP   reduce using rule 67 (val)
    RP         reduce using rule 67 (val)
    SEPARATOR  reduce using rule 67 (val)


State 161

   68 val: FLOAT .

    SS_OP      reduce using rule 68 (val)
    MD_OP      reduce using rule 68 (val)
    LLOG_OP    reduce using rule 68 (val)
    REL_OP     reduce using rule 68 (val)
    LIST_FUNC  reduce using rule 68 (val)
    RLIST_OP   reduce using rule 68 (val)
    RP         reduce using rule 68 (val)
    SEPARATOR  reduce using rule 68 (val)


State 162

   72 func_call: ID . LP $@11 func_params RP
   73          | ID . LP RP
   74 id: ID .

    LP  shift, and go to state 196

    SS_OP      reduce using rule 74 (id)
    MD_OP      reduce using rule 74 (id)
    LLOG_OP    reduce using rule 74 (id)
    REL_OP     reduce using rule 74 (id)
    LIST_FUNC  reduce using rule 74 (id)
    RLIST_OP   reduce using rule 74 (id)
    RP         reduce using rule 74 (id)
    SEPARATOR  reduce using rule 74 (id)


State 163

   58 ari_op: SS_OP . md_op

    INT      shift, and go to state 160
    FLOAT    shift, and go to state 161
    ID       shift, and go to state 162
    NIL      shift, and go to state 164
    UN_OP    shift, and go to state 165
    LITERAL  shift, and go to state 166
    LP       shift, and go to state 167

    md_op      go to state 197
    un_op      go to state 173
    val        go to state 174
    func_call  go to state 175
    id         go to state 176


State 164

   69 val: NIL .

    SS_OP      reduce using rule 69 (val)
    MD_OP      reduce using rule 69 (val)
    LLOG_OP    reduce using rule 69 (val)
    REL_OP     reduce using rule 69 (val)
    LIST_FUNC  reduce using rule 69 (val)
    RLIST_OP   reduce using rule 69 (val)
    RP         reduce using rule 69 (val)
    SEPARATOR  reduce using rule 69 (val)


State 165

   62 un_op: UN_OP . un_op

    INT      shift, and go to state 160
    FLOAT    shift, and go to state 161
    ID       shift, and go to state 162
    NIL      shift, and go to state 164
    UN_OP    shift, and go to state 165
    LITERAL  shift, and go to state 166
    LP       shift, and go to state 167

    un_op      go to state 198
    val        go to state 174
    func_call  go to state 175
    id         go to state 176


State 166

   70 val: LITERAL .

    SS_OP      reduce using rule 70 (val)
    MD_OP      reduce using rule 70 (val)
    LLOG_OP    reduce using rule 70 (val)
    REL_OP     reduce using rule 70 (val)
    LIST_FUNC  reduce using rule 70 (val)
    RLIST_OP   reduce using rule 70 (val)
    RP         reduce using rule 70 (val)
    SEPARATOR  reduce using rule 70 (val)


State 167

   66 val: LP . operation RP

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    SS_OP    shift, and go to state 143
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    operation  go to state 199
    log_op     go to state 148
    rel_op     go to state 149
    list_op    go to state 150
    ari_op     go to state 151
    md_op      go to state 152
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 168

   49 operation: log_op .
   50 log_op: log_op . LLOG_OP rel_op

    LLOG_OP  shift, and go to state 200

    RP         reduce using rule 49 (operation)
    SEPARATOR  reduce using rule 49 (operation)


State 169

   51 log_op: rel_op .
   52 rel_op: rel_op . REL_OP list_op

    REL_OP  shift, and go to state 201

    LLOG_OP    reduce using rule 51 (log_op)
    RP         reduce using rule 51 (log_op)
    SEPARATOR  reduce using rule 51 (log_op)


State 170

   53 rel_op: list_op .

    LLOG_OP    reduce using rule 53 (rel_op)
    REL_OP     reduce using rule 53 (rel_op)
    RP         reduce using rule 53 (rel_op)
    SEPARATOR  reduce using rule 53 (rel_op)


State 171

   54 list_op: ari_op . LIST_FUNC list_op
   55        | ari_op . RLIST_OP list_op
   56        | ari_op .
   57 ari_op: ari_op . SS_OP md_op

    SS_OP      shift, and go to state 202
    LIST_FUNC  shift, and go to state 203
    RLIST_OP   shift, and go to state 204

    LLOG_OP    reduce using rule 56 (list_op)
    REL_OP     reduce using rule 56 (list_op)
    RP         reduce using rule 56 (list_op)
    SEPARATOR  reduce using rule 56 (list_op)


State 172

   59 ari_op: md_op .
   60 md_op: md_op . MD_OP un_op

    MD_OP  shift, and go to state 205

    SS_OP      reduce using rule 59 (ari_op)
    LLOG_OP    reduce using rule 59 (ari_op)
    REL_OP     reduce using rule 59 (ari_op)
    LIST_FUNC  reduce using rule 59 (ari_op)
    RLIST_OP   reduce using rule 59 (ari_op)
    RP         reduce using rule 59 (ari_op)
    SEPARATOR  reduce using rule 59 (ari_op)


State 173

   61 md_op: un_op .

    SS_OP      reduce using rule 61 (md_op)
    MD_OP      reduce using rule 61 (md_op)
    LLOG_OP    reduce using rule 61 (md_op)
    REL_OP     reduce using rule 61 (md_op)
    LIST_FUNC  reduce using rule 61 (md_op)
    RLIST_OP   reduce using rule 61 (md_op)
    RP         reduce using rule 61 (md_op)
    SEPARATOR  reduce using rule 61 (md_op)


State 174

   63 un_op: val .

    SS_OP      reduce using rule 63 (un_op)
    MD_OP      reduce using rule 63 (un_op)
    LLOG_OP    reduce using rule 63 (un_op)
    REL_OP     reduce using rule 63 (un_op)
    LIST_FUNC  reduce using rule 63 (un_op)
    RLIST_OP   reduce using rule 63 (un_op)
    RP         reduce using rule 63 (un_op)
    SEPARATOR  reduce using rule 63 (un_op)


State 175

   65 val: func_call .

    SS_OP      reduce using rule 65 (val)
    MD_OP      reduce using rule 65 (val)
    LLOG_OP    reduce using rule 65 (val)
    REL_OP     reduce using rule 65 (val)
    LIST_FUNC  reduce using rule 65 (val)
    RLIST_OP   reduce using rule 65 (val)
    RP         reduce using rule 65 (val)
    SEPARATOR  reduce using rule 65 (val)


State 176

   64 val: id .

    SS_OP      reduce using rule 64 (val)
    MD_OP      reduce using rule 64 (val)
    LLOG_OP    reduce using rule 64 (val)
    REL_OP     reduce using rule 64 (val)
    LIST_FUNC  reduce using rule 64 (val)
    RLIST_OP   reduce using rule 64 (val)
    RP         reduce using rule 64 (val)
    SEPARATOR  reduce using rule 64 (val)


State 177

   44 for: FOR . LP ass_op END $@8 operation $@9 END ass_op RP $@10 statement

    LP  shift, and go to state 206


State 178

   29 statement: LB . $@5 block RB

    error    reduce using rule 28 ($@5)
    INT      reduce using rule 28 ($@5)
    FLOAT    reduce using rule 28 ($@5)
    TYPE     reduce using rule 28 ($@5)
    ID       reduce using rule 28 ($@5)
    IF       reduce using rule 28 ($@5)
    FOR      reduce using rule 28 ($@5)
    RETURN   reduce using rule 28 ($@5)
    OUT      reduce using rule 28 ($@5)
    IN       reduce using rule 28 ($@5)
    SS_OP    reduce using rule 28 ($@5)
    NIL      reduce using rule 28 ($@5)
    UN_OP    reduce using rule 28 ($@5)
    LITERAL  reduce using rule 28 ($@5)
    LB       reduce using rule 28 ($@5)
    LP       reduce using rule 28 ($@5)

    $@5  go to state 207


State 179

   30 statement: flow_ctr .

    INT      reduce using rule 30 (statement)
    FLOAT    reduce using rule 30 (statement)
    TYPE     reduce using rule 30 (statement)
    ID       reduce using rule 30 (statement)
    IF       reduce using rule 30 (statement)
    ELSE     reduce using rule 30 (statement)
    FOR      reduce using rule 30 (statement)
    RETURN   reduce using rule 30 (statement)
    OUT      reduce using rule 30 (statement)
    IN       reduce using rule 30 (statement)
    SS_OP    reduce using rule 30 (statement)
    NIL      reduce using rule 30 (statement)
    UN_OP    reduce using rule 30 (statement)
    LITERAL  reduce using rule 30 (statement)
    LB       reduce using rule 30 (statement)
    RB       reduce using rule 30 (statement)
    LP       reduce using rule 30 (statement)


State 180

   32 flow_ctr: $@6 . if_else

    IF  shift, and go to state 208

    if_else  go to state 209


State 181

   26 statement: expr . END

    END  shift, and go to state 210


State 182

   33 flow_ctr: for .

    INT      reduce using rule 33 (flow_ctr)
    FLOAT    reduce using rule 33 (flow_ctr)
    TYPE     reduce using rule 33 (flow_ctr)
    ID       reduce using rule 33 (flow_ctr)
    IF       reduce using rule 33 (flow_ctr)
    ELSE     reduce using rule 33 (flow_ctr)
    FOR      reduce using rule 33 (flow_ctr)
    RETURN   reduce using rule 33 (flow_ctr)
    OUT      reduce using rule 33 (flow_ctr)
    IN       reduce using rule 33 (flow_ctr)
    SS_OP    reduce using rule 33 (flow_ctr)
    NIL      reduce using rule 33 (flow_ctr)
    UN_OP    reduce using rule 33 (flow_ctr)
    LITERAL  reduce using rule 33 (flow_ctr)
    LB       reduce using rule 33 (flow_ctr)
    RB       reduce using rule 33 (flow_ctr)
    LP       reduce using rule 33 (flow_ctr)


State 183

   34 flow_ctr: return . END

    END  shift, and go to state 211


State 184

   27 statement: ass_op . END

    END  shift, and go to state 212


State 185

   48 ass_op: id . ASS_OP operation

    ASS_OP  shift, and go to state 213


State 186

   72 func_call: ID LP . $@11 func_params RP
   73          | ID LP . RP

    RP  shift, and go to state 214

    INT      reduce using rule 71 ($@11)
    FLOAT    reduce using rule 71 ($@11)
    ID       reduce using rule 71 ($@11)
    SS_OP    reduce using rule 71 ($@11)
    NIL      reduce using rule 71 ($@11)
    UN_OP    reduce using rule 71 ($@11)
    LITERAL  reduce using rule 71 ($@11)
    LP       reduce using rule 71 ($@11)

    $@11  go to state 215


State 187

   58 ari_op: SS_OP md_op .
   60 md_op: md_op . MD_OP un_op

    MD_OP  shift, and go to state 195

    SS_OP      reduce using rule 58 (ari_op)
    LLOG_OP    reduce using rule 58 (ari_op)
    REL_OP     reduce using rule 58 (ari_op)
    LIST_FUNC  reduce using rule 58 (ari_op)
    RLIST_OP   reduce using rule 58 (ari_op)
    RP         reduce using rule 58 (ari_op)


State 188

   62 un_op: UN_OP un_op .

    SS_OP      reduce using rule 62 (un_op)
    MD_OP      reduce using rule 62 (un_op)
    LLOG_OP    reduce using rule 62 (un_op)
    REL_OP     reduce using rule 62 (un_op)
    LIST_FUNC  reduce using rule 62 (un_op)
    RLIST_OP   reduce using rule 62 (un_op)
    RP         reduce using rule 62 (un_op)


State 189

   66 val: LP operation . RP

    RP  shift, and go to state 216


State 190

   50 log_op: log_op LLOG_OP . rel_op

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    SS_OP    shift, and go to state 143
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    rel_op     go to state 217
    list_op    go to state 150
    ari_op     go to state 151
    md_op      go to state 152
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 191

   52 rel_op: rel_op REL_OP . list_op

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    SS_OP    shift, and go to state 143
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    list_op    go to state 218
    ari_op     go to state 151
    md_op      go to state 152
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 192

   57 ari_op: ari_op SS_OP . md_op

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    md_op      go to state 219
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 193

   54 list_op: ari_op LIST_FUNC . list_op

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    SS_OP    shift, and go to state 143
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    list_op    go to state 220
    ari_op     go to state 151
    md_op      go to state 152
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 194

   55 list_op: ari_op RLIST_OP . list_op

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    SS_OP    shift, and go to state 143
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    list_op    go to state 221
    ari_op     go to state 151
    md_op      go to state 152
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 195

   60 md_op: md_op MD_OP . un_op

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    un_op      go to state 222
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 196

   72 func_call: ID LP . $@11 func_params RP
   73          | ID LP . RP

    RP  shift, and go to state 223

    INT      reduce using rule 71 ($@11)
    FLOAT    reduce using rule 71 ($@11)
    ID       reduce using rule 71 ($@11)
    SS_OP    reduce using rule 71 ($@11)
    NIL      reduce using rule 71 ($@11)
    UN_OP    reduce using rule 71 ($@11)
    LITERAL  reduce using rule 71 ($@11)
    LP       reduce using rule 71 ($@11)

    $@11  go to state 224


State 197

   58 ari_op: SS_OP md_op .
   60 md_op: md_op . MD_OP un_op

    MD_OP  shift, and go to state 205

    SS_OP      reduce using rule 58 (ari_op)
    LLOG_OP    reduce using rule 58 (ari_op)
    REL_OP     reduce using rule 58 (ari_op)
    LIST_FUNC  reduce using rule 58 (ari_op)
    RLIST_OP   reduce using rule 58 (ari_op)
    RP         reduce using rule 58 (ari_op)
    SEPARATOR  reduce using rule 58 (ari_op)


State 198

   62 un_op: UN_OP un_op .

    SS_OP      reduce using rule 62 (un_op)
    MD_OP      reduce using rule 62 (un_op)
    LLOG_OP    reduce using rule 62 (un_op)
    REL_OP     reduce using rule 62 (un_op)
    LIST_FUNC  reduce using rule 62 (un_op)
    RLIST_OP   reduce using rule 62 (un_op)
    RP         reduce using rule 62 (un_op)
    SEPARATOR  reduce using rule 62 (un_op)


State 199

   66 val: LP operation . RP

    RP  shift, and go to state 225


State 200

   50 log_op: log_op LLOG_OP . rel_op

    INT      shift, and go to state 160
    FLOAT    shift, and go to state 161
    ID       shift, and go to state 162
    SS_OP    shift, and go to state 163
    NIL      shift, and go to state 164
    UN_OP    shift, and go to state 165
    LITERAL  shift, and go to state 166
    LP       shift, and go to state 167

    rel_op     go to state 226
    list_op    go to state 170
    ari_op     go to state 171
    md_op      go to state 172
    un_op      go to state 173
    val        go to state 174
    func_call  go to state 175
    id         go to state 176


State 201

   52 rel_op: rel_op REL_OP . list_op

    INT      shift, and go to state 160
    FLOAT    shift, and go to state 161
    ID       shift, and go to state 162
    SS_OP    shift, and go to state 163
    NIL      shift, and go to state 164
    UN_OP    shift, and go to state 165
    LITERAL  shift, and go to state 166
    LP       shift, and go to state 167

    list_op    go to state 227
    ari_op     go to state 171
    md_op      go to state 172
    un_op      go to state 173
    val        go to state 174
    func_call  go to state 175
    id         go to state 176


State 202

   57 ari_op: ari_op SS_OP . md_op

    INT      shift, and go to state 160
    FLOAT    shift, and go to state 161
    ID       shift, and go to state 162
    NIL      shift, and go to state 164
    UN_OP    shift, and go to state 165
    LITERAL  shift, and go to state 166
    LP       shift, and go to state 167

    md_op      go to state 228
    un_op      go to state 173
    val        go to state 174
    func_call  go to state 175
    id         go to state 176


State 203

   54 list_op: ari_op LIST_FUNC . list_op

    INT      shift, and go to state 160
    FLOAT    shift, and go to state 161
    ID       shift, and go to state 162
    SS_OP    shift, and go to state 163
    NIL      shift, and go to state 164
    UN_OP    shift, and go to state 165
    LITERAL  shift, and go to state 166
    LP       shift, and go to state 167

    list_op    go to state 229
    ari_op     go to state 171
    md_op      go to state 172
    un_op      go to state 173
    val        go to state 174
    func_call  go to state 175
    id         go to state 176


State 204

   55 list_op: ari_op RLIST_OP . list_op

    INT      shift, and go to state 160
    FLOAT    shift, and go to state 161
    ID       shift, and go to state 162
    SS_OP    shift, and go to state 163
    NIL      shift, and go to state 164
    UN_OP    shift, and go to state 165
    LITERAL  shift, and go to state 166
    LP       shift, and go to state 167

    list_op    go to state 230
    ari_op     go to state 171
    md_op      go to state 172
    un_op      go to state 173
    val        go to state 174
    func_call  go to state 175
    id         go to state 176


State 205

   60 md_op: md_op MD_OP . un_op

    INT      shift, and go to state 160
    FLOAT    shift, and go to state 161
    ID       shift, and go to state 162
    NIL      shift, and go to state 164
    UN_OP    shift, and go to state 165
    LITERAL  shift, and go to state 166
    LP       shift, and go to state 167

    un_op      go to state 231
    val        go to state 174
    func_call  go to state 175
    id         go to state 176


State 206

   44 for: FOR LP . ass_op END $@8 operation $@9 END ass_op RP $@10 statement

    ID  shift, and go to state 101

    ass_op  go to state 232
    id      go to state 103


State 207

   29 statement: LB $@5 . block RB

    error    shift, and go to state 33
    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    TYPE     shift, and go to state 36
    ID       shift, and go to state 37
    FOR      shift, and go to state 38
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 46
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    declar     go to state 48
    block      go to state 233
    statement  go to state 50
    flow_ctr   go to state 51
    $@6        go to state 52
    expr       go to state 53
    for        go to state 54
    return     go to state 55
    input      go to state 56
    output     go to state 57
    ass_op     go to state 58
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 208

   38 if_else: IF . LP operation RP statement
   40        | IF . LP operation RP statement ELSE $@7 statement

    LP  shift, and go to state 234


State 209

   32 flow_ctr: $@6 if_else .

    INT      reduce using rule 32 (flow_ctr)
    FLOAT    reduce using rule 32 (flow_ctr)
    TYPE     reduce using rule 32 (flow_ctr)
    ID       reduce using rule 32 (flow_ctr)
    IF       reduce using rule 32 (flow_ctr)
    ELSE     reduce using rule 32 (flow_ctr)
    FOR      reduce using rule 32 (flow_ctr)
    RETURN   reduce using rule 32 (flow_ctr)
    OUT      reduce using rule 32 (flow_ctr)
    IN       reduce using rule 32 (flow_ctr)
    SS_OP    reduce using rule 32 (flow_ctr)
    NIL      reduce using rule 32 (flow_ctr)
    UN_OP    reduce using rule 32 (flow_ctr)
    LITERAL  reduce using rule 32 (flow_ctr)
    LB       reduce using rule 32 (flow_ctr)
    RB       reduce using rule 32 (flow_ctr)
    LP       reduce using rule 32 (flow_ctr)


State 210

   26 statement: expr END .

    INT      reduce using rule 26 (statement)
    FLOAT    reduce using rule 26 (statement)
    TYPE     reduce using rule 26 (statement)
    ID       reduce using rule 26 (statement)
    IF       reduce using rule 26 (statement)
    ELSE     reduce using rule 26 (statement)
    FOR      reduce using rule 26 (statement)
    RETURN   reduce using rule 26 (statement)
    OUT      reduce using rule 26 (statement)
    IN       reduce using rule 26 (statement)
    SS_OP    reduce using rule 26 (statement)
    NIL      reduce using rule 26 (statement)
    UN_OP    reduce using rule 26 (statement)
    LITERAL  reduce using rule 26 (statement)
    LB       reduce using rule 26 (statement)
    RB       reduce using rule 26 (statement)
    LP       reduce using rule 26 (statement)


State 211

   34 flow_ctr: return END .

    INT      reduce using rule 34 (flow_ctr)
    FLOAT    reduce using rule 34 (flow_ctr)
    TYPE     reduce using rule 34 (flow_ctr)
    ID       reduce using rule 34 (flow_ctr)
    IF       reduce using rule 34 (flow_ctr)
    ELSE     reduce using rule 34 (flow_ctr)
    FOR      reduce using rule 34 (flow_ctr)
    RETURN   reduce using rule 34 (flow_ctr)
    OUT      reduce using rule 34 (flow_ctr)
    IN       reduce using rule 34 (flow_ctr)
    SS_OP    reduce using rule 34 (flow_ctr)
    NIL      reduce using rule 34 (flow_ctr)
    UN_OP    reduce using rule 34 (flow_ctr)
    LITERAL  reduce using rule 34 (flow_ctr)
    LB       reduce using rule 34 (flow_ctr)
    RB       reduce using rule 34 (flow_ctr)
    LP       reduce using rule 34 (flow_ctr)


State 212

   27 statement: ass_op END .

    INT      reduce using rule 27 (statement)
    FLOAT    reduce using rule 27 (statement)
    TYPE     reduce using rule 27 (statement)
    ID       reduce using rule 27 (statement)
    IF       reduce using rule 27 (statement)
    ELSE     reduce using rule 27 (statement)
    FOR      reduce using rule 27 (statement)
    RETURN   reduce using rule 27 (statement)
    OUT      reduce using rule 27 (statement)
    IN       reduce using rule 27 (statement)
    SS_OP    reduce using rule 27 (statement)
    NIL      reduce using rule 27 (statement)
    UN_OP    reduce using rule 27 (statement)
    LITERAL  reduce using rule 27 (statement)
    LB       reduce using rule 27 (statement)
    RB       reduce using rule 27 (statement)
    LP       reduce using rule 27 (statement)


State 213

   48 ass_op: id ASS_OP . operation

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    SS_OP    shift, and go to state 143
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    operation  go to state 235
    log_op     go to state 148
    rel_op     go to state 149
    list_op    go to state 150
    ari_op     go to state 151
    md_op      go to state 152
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 214

   73 func_call: ID LP RP .

    SS_OP      reduce using rule 73 (func_call)
    MD_OP      reduce using rule 73 (func_call)
    LLOG_OP    reduce using rule 73 (func_call)
    REL_OP     reduce using rule 73 (func_call)
    LIST_FUNC  reduce using rule 73 (func_call)
    RLIST_OP   reduce using rule 73 (func_call)
    RP         reduce using rule 73 (func_call)


State 215

   72 func_call: ID LP $@11 . func_params RP

    INT      shift, and go to state 160
    FLOAT    shift, and go to state 161
    ID       shift, and go to state 162
    SS_OP    shift, and go to state 163
    NIL      shift, and go to state 164
    UN_OP    shift, and go to state 165
    LITERAL  shift, and go to state 166
    LP       shift, and go to state 167

    operation    go to state 116
    log_op       go to state 168
    rel_op       go to state 169
    list_op      go to state 170
    ari_op       go to state 171
    md_op        go to state 172
    un_op        go to state 173
    val          go to state 174
    func_call    go to state 175
    id           go to state 176
    func_params  go to state 236


State 216

   66 val: LP operation RP .

    SS_OP      reduce using rule 66 (val)
    MD_OP      reduce using rule 66 (val)
    LLOG_OP    reduce using rule 66 (val)
    REL_OP     reduce using rule 66 (val)
    LIST_FUNC  reduce using rule 66 (val)
    RLIST_OP   reduce using rule 66 (val)
    RP         reduce using rule 66 (val)


State 217

   50 log_op: log_op LLOG_OP rel_op .
   52 rel_op: rel_op . REL_OP list_op

    REL_OP  shift, and go to state 191

    LLOG_OP  reduce using rule 50 (log_op)
    RP       reduce using rule 50 (log_op)


State 218

   52 rel_op: rel_op REL_OP list_op .

    LLOG_OP  reduce using rule 52 (rel_op)
    REL_OP   reduce using rule 52 (rel_op)
    RP       reduce using rule 52 (rel_op)


State 219

   57 ari_op: ari_op SS_OP md_op .
   60 md_op: md_op . MD_OP un_op

    MD_OP  shift, and go to state 195

    SS_OP      reduce using rule 57 (ari_op)
    LLOG_OP    reduce using rule 57 (ari_op)
    REL_OP     reduce using rule 57 (ari_op)
    LIST_FUNC  reduce using rule 57 (ari_op)
    RLIST_OP   reduce using rule 57 (ari_op)
    RP         reduce using rule 57 (ari_op)


State 220

   54 list_op: ari_op LIST_FUNC list_op .

    LLOG_OP  reduce using rule 54 (list_op)
    REL_OP   reduce using rule 54 (list_op)
    RP       reduce using rule 54 (list_op)


State 221

   55 list_op: ari_op RLIST_OP list_op .

    LLOG_OP  reduce using rule 55 (list_op)
    REL_OP   reduce using rule 55 (list_op)
    RP       reduce using rule 55 (list_op)


State 222

   60 md_op: md_op MD_OP un_op .

    SS_OP      reduce using rule 60 (md_op)
    MD_OP      reduce using rule 60 (md_op)
    LLOG_OP    reduce using rule 60 (md_op)
    REL_OP     reduce using rule 60 (md_op)
    LIST_FUNC  reduce using rule 60 (md_op)
    RLIST_OP   reduce using rule 60 (md_op)
    RP         reduce using rule 60 (md_op)


State 223

   73 func_call: ID LP RP .

    SS_OP      reduce using rule 73 (func_call)
    MD_OP      reduce using rule 73 (func_call)
    LLOG_OP    reduce using rule 73 (func_call)
    REL_OP     reduce using rule 73 (func_call)
    LIST_FUNC  reduce using rule 73 (func_call)
    RLIST_OP   reduce using rule 73 (func_call)
    RP         reduce using rule 73 (func_call)
    SEPARATOR  reduce using rule 73 (func_call)


State 224

   72 func_call: ID LP $@11 . func_params RP

    INT      shift, and go to state 160
    FLOAT    shift, and go to state 161
    ID       shift, and go to state 162
    SS_OP    shift, and go to state 163
    NIL      shift, and go to state 164
    UN_OP    shift, and go to state 165
    LITERAL  shift, and go to state 166
    LP       shift, and go to state 167

    operation    go to state 116
    log_op       go to state 168
    rel_op       go to state 169
    list_op      go to state 170
    ari_op       go to state 171
    md_op        go to state 172
    un_op        go to state 173
    val          go to state 174
    func_call    go to state 175
    id           go to state 176
    func_params  go to state 237


State 225

   66 val: LP operation RP .

    SS_OP      reduce using rule 66 (val)
    MD_OP      reduce using rule 66 (val)
    LLOG_OP    reduce using rule 66 (val)
    REL_OP     reduce using rule 66 (val)
    LIST_FUNC  reduce using rule 66 (val)
    RLIST_OP   reduce using rule 66 (val)
    RP         reduce using rule 66 (val)
    SEPARATOR  reduce using rule 66 (val)


State 226

   50 log_op: log_op LLOG_OP rel_op .
   52 rel_op: rel_op . REL_OP list_op

    REL_OP  shift, and go to state 201

    LLOG_OP    reduce using rule 50 (log_op)
    RP         reduce using rule 50 (log_op)
    SEPARATOR  reduce using rule 50 (log_op)


State 227

   52 rel_op: rel_op REL_OP list_op .

    LLOG_OP    reduce using rule 52 (rel_op)
    REL_OP     reduce using rule 52 (rel_op)
    RP         reduce using rule 52 (rel_op)
    SEPARATOR  reduce using rule 52 (rel_op)


State 228

   57 ari_op: ari_op SS_OP md_op .
   60 md_op: md_op . MD_OP un_op

    MD_OP  shift, and go to state 205

    SS_OP      reduce using rule 57 (ari_op)
    LLOG_OP    reduce using rule 57 (ari_op)
    REL_OP     reduce using rule 57 (ari_op)
    LIST_FUNC  reduce using rule 57 (ari_op)
    RLIST_OP   reduce using rule 57 (ari_op)
    RP         reduce using rule 57 (ari_op)
    SEPARATOR  reduce using rule 57 (ari_op)


State 229

   54 list_op: ari_op LIST_FUNC list_op .

    LLOG_OP    reduce using rule 54 (list_op)
    REL_OP     reduce using rule 54 (list_op)
    RP         reduce using rule 54 (list_op)
    SEPARATOR  reduce using rule 54 (list_op)


State 230

   55 list_op: ari_op RLIST_OP list_op .

    LLOG_OP    reduce using rule 55 (list_op)
    REL_OP     reduce using rule 55 (list_op)
    RP         reduce using rule 55 (list_op)
    SEPARATOR  reduce using rule 55 (list_op)


State 231

   60 md_op: md_op MD_OP un_op .

    SS_OP      reduce using rule 60 (md_op)
    MD_OP      reduce using rule 60 (md_op)
    LLOG_OP    reduce using rule 60 (md_op)
    REL_OP     reduce using rule 60 (md_op)
    LIST_FUNC  reduce using rule 60 (md_op)
    RLIST_OP   reduce using rule 60 (md_op)
    RP         reduce using rule 60 (md_op)
    SEPARATOR  reduce using rule 60 (md_op)


State 232

   44 for: FOR LP ass_op . END $@8 operation $@9 END ass_op RP $@10 statement

    END  shift, and go to state 238


State 233

   21 block: block . statement
   22      | block . declar
   29 statement: LB $@5 block . RB

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    TYPE     shift, and go to state 36
    ID       shift, and go to state 37
    FOR      shift, and go to state 38
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 46
    RB       shift, and go to state 239
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    declar     go to state 83
    statement  go to state 84
    flow_ctr   go to state 51
    $@6        go to state 52
    expr       go to state 53
    for        go to state 54
    return     go to state 55
    input      go to state 56
    output     go to state 57
    ass_op     go to state 58
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 234

   38 if_else: IF LP . operation RP statement
   40        | IF LP . operation RP statement ELSE $@7 statement

    INT      shift, and go to state 140
    FLOAT    shift, and go to state 141
    ID       shift, and go to state 142
    SS_OP    shift, and go to state 143
    NIL      shift, and go to state 144
    UN_OP    shift, and go to state 145
    LITERAL  shift, and go to state 146
    LP       shift, and go to state 147

    operation  go to state 240
    log_op     go to state 148
    rel_op     go to state 149
    list_op    go to state 150
    ari_op     go to state 151
    md_op      go to state 152
    un_op      go to state 153
    val        go to state 154
    func_call  go to state 155
    id         go to state 156


State 235

   48 ass_op: id ASS_OP operation .

    RP  reduce using rule 48 (ass_op)


State 236

   72 func_call: ID LP $@11 func_params . RP
   75 func_params: func_params . SEPARATOR operation

    RP         shift, and go to state 241
    SEPARATOR  shift, and go to state 124


State 237

   72 func_call: ID LP $@11 func_params . RP
   75 func_params: func_params . SEPARATOR operation

    RP         shift, and go to state 242
    SEPARATOR  shift, and go to state 124


State 238

   44 for: FOR LP ass_op END . $@8 operation $@9 END ass_op RP $@10 statement

    INT      reduce using rule 41 ($@8)
    FLOAT    reduce using rule 41 ($@8)
    ID       reduce using rule 41 ($@8)
    SS_OP    reduce using rule 41 ($@8)
    NIL      reduce using rule 41 ($@8)
    UN_OP    reduce using rule 41 ($@8)
    LITERAL  reduce using rule 41 ($@8)
    LP       reduce using rule 41 ($@8)

    $@8  go to state 243


State 239

   29 statement: LB $@5 block RB .

    INT      reduce using rule 29 (statement)
    FLOAT    reduce using rule 29 (statement)
    TYPE     reduce using rule 29 (statement)
    ID       reduce using rule 29 (statement)
    IF       reduce using rule 29 (statement)
    ELSE     reduce using rule 29 (statement)
    FOR      reduce using rule 29 (statement)
    RETURN   reduce using rule 29 (statement)
    OUT      reduce using rule 29 (statement)
    IN       reduce using rule 29 (statement)
    SS_OP    reduce using rule 29 (statement)
    NIL      reduce using rule 29 (statement)
    UN_OP    reduce using rule 29 (statement)
    LITERAL  reduce using rule 29 (statement)
    LB       reduce using rule 29 (statement)
    RB       reduce using rule 29 (statement)
    LP       reduce using rule 29 (statement)


State 240

   38 if_else: IF LP operation . RP statement
   40        | IF LP operation . RP statement ELSE $@7 statement

    RP  shift, and go to state 244


State 241

   72 func_call: ID LP $@11 func_params RP .

    SS_OP      reduce using rule 72 (func_call)
    MD_OP      reduce using rule 72 (func_call)
    LLOG_OP    reduce using rule 72 (func_call)
    REL_OP     reduce using rule 72 (func_call)
    LIST_FUNC  reduce using rule 72 (func_call)
    RLIST_OP   reduce using rule 72 (func_call)
    RP         reduce using rule 72 (func_call)


State 242

   72 func_call: ID LP $@11 func_params RP .

    SS_OP      reduce using rule 72 (func_call)
    MD_OP      reduce using rule 72 (func_call)
    LLOG_OP    reduce using rule 72 (func_call)
    REL_OP     reduce using rule 72 (func_call)
    LIST_FUNC  reduce using rule 72 (func_call)
    RLIST_OP   reduce using rule 72 (func_call)
    RP         reduce using rule 72 (func_call)
    SEPARATOR  reduce using rule 72 (func_call)


State 243

   44 for: FOR LP ass_op END $@8 . operation $@9 END ass_op RP $@10 statement

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 139
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LP       shift, and go to state 47

    operation  go to state 245
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 75


State 244

   38 if_else: IF LP operation RP . statement
   40        | IF LP operation RP . statement ELSE $@7 statement

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 37
    FOR      shift, and go to state 177
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 178
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    statement  go to state 246
    flow_ctr   go to state 179
    $@6        go to state 180
    expr       go to state 181
    for        go to state 182
    return     go to state 183
    input      go to state 56
    output     go to state 57
    ass_op     go to state 184
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 245

   44 for: FOR LP ass_op END $@8 operation . $@9 END ass_op RP $@10 statement

    END  reduce using rule 42 ($@9)

    $@9  go to state 247


State 246

   38 if_else: IF LP operation RP statement .
   40        | IF LP operation RP statement . ELSE $@7 statement

    ELSE  shift, and go to state 248

    INT      reduce using rule 38 (if_else)
    FLOAT    reduce using rule 38 (if_else)
    TYPE     reduce using rule 38 (if_else)
    ID       reduce using rule 38 (if_else)
    IF       reduce using rule 38 (if_else)
    FOR      reduce using rule 38 (if_else)
    RETURN   reduce using rule 38 (if_else)
    OUT      reduce using rule 38 (if_else)
    IN       reduce using rule 38 (if_else)
    SS_OP    reduce using rule 38 (if_else)
    NIL      reduce using rule 38 (if_else)
    UN_OP    reduce using rule 38 (if_else)
    LITERAL  reduce using rule 38 (if_else)
    LB       reduce using rule 38 (if_else)
    RB       reduce using rule 38 (if_else)
    LP       reduce using rule 38 (if_else)


State 247

   44 for: FOR LP ass_op END $@8 operation $@9 . END ass_op RP $@10 statement

    END  shift, and go to state 249


State 248

   40 if_else: IF LP operation RP statement ELSE . $@7 statement

    INT      reduce using rule 39 ($@7)
    FLOAT    reduce using rule 39 ($@7)
    ID       reduce using rule 39 ($@7)
    IF       reduce using rule 39 ($@7)
    FOR      reduce using rule 39 ($@7)
    RETURN   reduce using rule 39 ($@7)
    OUT      reduce using rule 39 ($@7)
    IN       reduce using rule 39 ($@7)
    SS_OP    reduce using rule 39 ($@7)
    NIL      reduce using rule 39 ($@7)
    UN_OP    reduce using rule 39 ($@7)
    LITERAL  reduce using rule 39 ($@7)
    LB       reduce using rule 39 ($@7)
    LP       reduce using rule 39 ($@7)

    $@7  go to state 250


State 249

   44 for: FOR LP ass_op END $@8 operation $@9 END . ass_op RP $@10 statement

    ID  shift, and go to state 101

    ass_op  go to state 251
    id      go to state 185


State 250

   40 if_else: IF LP operation RP statement ELSE $@7 . statement

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 37
    FOR      shift, and go to state 177
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 178
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    statement  go to state 252
    flow_ctr   go to state 179
    $@6        go to state 180
    expr       go to state 181
    for        go to state 182
    return     go to state 183
    input      go to state 56
    output     go to state 57
    ass_op     go to state 184
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 251

   44 for: FOR LP ass_op END $@8 operation $@9 END ass_op . RP $@10 statement

    RP  shift, and go to state 253


State 252

   40 if_else: IF LP operation RP statement ELSE $@7 statement .

    INT      reduce using rule 40 (if_else)
    FLOAT    reduce using rule 40 (if_else)
    TYPE     reduce using rule 40 (if_else)
    ID       reduce using rule 40 (if_else)
    IF       reduce using rule 40 (if_else)
    ELSE     reduce using rule 40 (if_else)
    FOR      reduce using rule 40 (if_else)
    RETURN   reduce using rule 40 (if_else)
    OUT      reduce using rule 40 (if_else)
    IN       reduce using rule 40 (if_else)
    SS_OP    reduce using rule 40 (if_else)
    NIL      reduce using rule 40 (if_else)
    UN_OP    reduce using rule 40 (if_else)
    LITERAL  reduce using rule 40 (if_else)
    LB       reduce using rule 40 (if_else)
    RB       reduce using rule 40 (if_else)
    LP       reduce using rule 40 (if_else)


State 253

   44 for: FOR LP ass_op END $@8 operation $@9 END ass_op RP . $@10 statement

    INT      reduce using rule 43 ($@10)
    FLOAT    reduce using rule 43 ($@10)
    ID       reduce using rule 43 ($@10)
    IF       reduce using rule 43 ($@10)
    FOR      reduce using rule 43 ($@10)
    RETURN   reduce using rule 43 ($@10)
    OUT      reduce using rule 43 ($@10)
    IN       reduce using rule 43 ($@10)
    SS_OP    reduce using rule 43 ($@10)
    NIL      reduce using rule 43 ($@10)
    UN_OP    reduce using rule 43 ($@10)
    LITERAL  reduce using rule 43 ($@10)
    LB       reduce using rule 43 ($@10)
    LP       reduce using rule 43 ($@10)

    $@10  go to state 254


State 254

   44 for: FOR LP ass_op END $@8 operation $@9 END ass_op RP $@10 . statement

    INT      shift, and go to state 34
    FLOAT    shift, and go to state 35
    ID       shift, and go to state 37
    FOR      shift, and go to state 177
    RETURN   shift, and go to state 39
    OUT      shift, and go to state 40
    IN       shift, and go to state 41
    SS_OP    shift, and go to state 42
    NIL      shift, and go to state 43
    UN_OP    shift, and go to state 44
    LITERAL  shift, and go to state 45
    LB       shift, and go to state 178
    LP       shift, and go to state 47

    IF  reduce using rule 31 ($@6)

    statement  go to state 255
    flow_ctr   go to state 179
    $@6        go to state 180
    expr       go to state 181
    for        go to state 182
    return     go to state 183
    input      go to state 56
    output     go to state 57
    ass_op     go to state 184
    operation  go to state 59
    log_op     go to state 60
    rel_op     go to state 61
    list_op    go to state 62
    ari_op     go to state 63
    md_op      go to state 64
    un_op      go to state 65
    val        go to state 66
    func_call  go to state 67
    id         go to state 68


State 255

   44 for: FOR LP ass_op END $@8 operation $@9 END ass_op RP $@10 statement .

    INT      reduce using rule 44 (for)
    FLOAT    reduce using rule 44 (for)
    TYPE     reduce using rule 44 (for)
    ID       reduce using rule 44 (for)
    IF       reduce using rule 44 (for)
    ELSE     reduce using rule 44 (for)
    FOR      reduce using rule 44 (for)
    RETURN   reduce using rule 44 (for)
    OUT      reduce using rule 44 (for)
    IN       reduce using rule 44 (for)
    SS_OP    reduce using rule 44 (for)
    NIL      reduce using rule 44 (for)
    UN_OP    reduce using rule 44 (for)
    LITERAL  reduce using rule 44 (for)
    LB       reduce using rule 44 (for)
    RB       reduce using rule 44 (for)
    LP       reduce using rule 44 (for)
